{{>navbar}}

<body class="bg-gray-100 min-h-screen p-6">
    <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md overflow-hidden mt-20">
        <div class="p-6 border-b">
            <h1 class="text-2xl font-bold text-gray-800">Crear Cliente</h1>
            <form id="form-cliente" action="/memberships/createClient" method="POST" class="mt-4 space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">Nombre completo</label>
                    <input type="text" name="nombre_completo" required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Teléfono</label>
                    <input type="text" name="telefono"
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Correo</label>
                    <input type="email" name="correo" required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>

                <button type="submit"
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Registrar Cliente
                </button>

                <!-- Mensaje de estado -->
                <div id="cliente-message" class="hidden text-sm font-medium"></div>
            </form>
        </div>

        <div class="p-6">
            <h1 class="text-2xl font-bold text-gray-800">Crear Membresía</h1>
            <form id="createMemberForm" action="/memberships/createMembership" method="POST" class="mt-4 space-y-4">
                <!-- Campo oculto para el ID del cliente -->
                <input type="hidden" id="id_cliente" name="id_cliente" value="">

                <div>
                    <label class="block text-sm font-medium text-gray-700">Tipo de membresía:</label>
                    <select id="tipoMembresia" name="id_tipo_membresia" required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        {{#each tiposMembresia}}
                        <option value="{{id_tipo_membresia}}" data-max="{{max_integrantes}}" data-precio="{{precio}}">
                            {{nombre}} - ${{precio}}
                        </option>
                        {{/each}}
                    </select>
                </div>

                <!-- Fecha de inicio -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Fecha de inicio:</label>
                    <input type="date" id="fecha_inicio" name="fecha_inicio" required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>

                <!-- Fecha de fin (calculada automáticamente) -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Fecha de fin:</label>
                    <input type="date" id="fecha_fin" name="fecha_fin" readonly
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100">
                </div>

                <!-- Campo oculto para el precio final -->
                <input type="hidden" id="precio_final" name="precio_final" value="">

                <!-- Sección Integrantes (solo si es familiar) -->
                <div id="integrantesSection" class="hidden mt-4 p-4 border border-gray-200 rounded-md">
                    <h4 class="text-sm font-medium text-gray-700 mb-2">Integrantes familiares</h4>
                    <div id="integrantesContainer" class="space-y-2"></div>
                    <button type="button" id="addIntegranteBtn"
                        class="mt-2 inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        ➕ Agregar integrante
                    </button>
                </div>
                {{!-- Metodo de pago --}}
                <div>
                    <label class="block text-sm font-medium text-gray-700">Metodo de pago:</label>
                    <select id="metodo_pago" name="metodo_pago" required
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        {{#each tiposPago}}
                        <option value="{{id_metodo_pago}}">{{nombre}}</option>
                        {{/each}}
                    </select>
                </div>

                <!-- Precio final (solo visual) -->
                <div class="mt-4">
                    <label class="block text-sm font-medium text-gray-700">Precio final:</label>
                    <input type="text" id="precioFinal" readonly
                        class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-50">
                </div>

                <button type="submit" id="submit-membership" disabled
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-400 hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400">
                    Crear Membresía (complete primero el cliente)
                </button>

                <!-- Mensaje de estado -->
                <div id="membership-message" class="hidden text-sm font-medium"></div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Referencias a elementos del DOM
            const formCliente = document.getElementById("form-cliente");
            const formMembership = document.getElementById("createMemberForm");
            const clienteMessage = document.getElementById("cliente-message");
            const membershipMessage = document.getElementById("membership-message");
            const idClienteInput = document.getElementById("id_cliente");
            const submitMembershipBtn = document.getElementById("submit-membership");
            const tipoMembresiaSelect = document.getElementById("tipoMembresia");
            const integrantesSection = document.getElementById("integrantesSection");
            const integrantesContainer = document.getElementById("integrantesContainer");
            const addIntegranteBtn = document.getElementById("addIntegranteBtn");
            const precioFinalInput = document.getElementById("precioFinal");
            const precioFinalHidden = document.getElementById("precio_final");
            const fechaInicioInput = document.getElementById("fecha_inicio");
            const fechaFinInput = document.getElementById("fecha_fin");

            // Establecer fecha mínima como hoy
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            fechaInicioInput.min = `${yyyy}-${mm}-${dd}`;

            let maxIntegrantes = 1;
            let clienteRegistrado = false;
            const duracionDias = 30; // Todas las membresías duran 30 días

            // Manejar envío del formulario de cliente
            formCliente.addEventListener("submit", async (e) => {
                e.preventDefault();
                const submitBtn = formCliente.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;

                try {
                    // Mostrar indicador de carga
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = 'Procesando...';

                    const formData = new FormData(formCliente);
                    console.log('Enviando datos del formulario:', Object.fromEntries(formData.entries()));

                    const resp = await fetch(formCliente.action, {
                        method: "POST",
                        body: new URLSearchParams(formData),
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        }
                    });

                    const responseData = await resp.json();
                    console.log('Respuesta del servidor:', responseData);

                    if (!resp.ok) {
                        const errorMsg = responseData.error || responseData.message || 'Error desconocido';
                        throw new Error(errorMsg);
                    }

                    if (responseData.id_cliente) {
                        // Guardar el ID del cliente en el campo oculto
                        idClienteInput.value = responseData.id_cliente;
                        clienteRegistrado = true;

                        // Habilitar el botón de membresía
                        submitMembershipBtn.disabled = false;
                        submitMembershipBtn.classList.remove('bg-gray-400', 'hover:bg-gray-400', 'focus:ring-gray-400');
                        submitMembershipBtn.classList.add('bg-blue-600', 'hover:bg-blue-700', 'focus:ring-blue-500');
                        submitMembershipBtn.textContent = 'Crear Membresía';

                        // Mostrar mensaje de éxito
                        showMessage(clienteMessage, 'Cliente registrado con éxito. Ahora puede crear la membresía.', 'success');

                        // Desplazarse al formulario de membresía
                        formMembership.scrollIntoView({ behavior: 'smooth' });

                        console.log('ID del cliente registrado:', responseData.id_cliente);
                    } else {
                        throw new Error('No se recibió un ID de cliente válido');
                    }
                } catch (err) {
                    console.error('Error al registrar cliente:', err);
                    showMessage(clienteMessage, `Error: ${err.message}`, 'error');
                } finally {
                    // Restaurar el botón
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });

            // Manejar envío del formulario de membresía
            formMembership.addEventListener("submit", async (e) => {
                e.preventDefault();
                const submitBtn = formMembership.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;

                try {
                    // Mostrar indicador de carga
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = 'Procesando...';

                    if (!clienteRegistrado) {
                        showMessage(membershipMessage, 'Debe registrar un cliente primero', 'error');
                        return;
                    }

                    // Verificar que el id_cliente es un número válido
                    const idClienteValue = idClienteInput.value;
                    if (!idClienteValue || isNaN(idClienteValue)) {
                        showMessage(membershipMessage, 'Error: ID de cliente inválido. Por favor, registre el cliente nuevamente.', 'error');
                        return;
                    }

                    // Validar que la fecha de inicio no sea anterior a hoy
                    const fechaInicio = new Date(fechaInicioInput.value);
                    if (fechaInicio < new Date().setHours(0, 0, 0, 0)) {
                        showMessage(membershipMessage, 'Error: La fecha de inicio no puede ser anterior a hoy', 'error');
                        return;
                    }

                    // Validar integrantes si es membresía familiar
                    if (maxIntegrantes > 1) {
                        const integrantes = document.querySelectorAll('input[name="integrantes[]"]');
                        if (integrantes.length === 0) {
                            showMessage(membershipMessage, 'Error: Debe agregar al menos un integrante familiar', 'error');
                            return;
                        }

                        // Validar que todos los integrantes tengan nombre
                        for (let integrante of integrantes) {
                            if (!integrante.value.trim()) {
                                showMessage(membershipMessage, 'Error: Todos los integrantes deben tener un nombre', 'error');
                                return;
                            }
                        }
                    }

                    // Crear FormData y asegurar que los valores sean correctos
                    const formData = new FormData(formMembership);

                    // Convertir a objeto para debug
                    const formDataObj = {};
                    for (let [key, value] of formData.entries()) {
                        formDataObj[key] = value;
                        console.log(`${key}: ${value} (tipo: ${typeof value})`);
                    }

                    const resp = await fetch(formMembership.action, {
                        method: "POST",
                        body: new URLSearchParams(formData),
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/x-www-form-urlencoded"
                        }
                    });

                    // Verificar si la respuesta es una redirección
                    if (resp.redirected) {
                        window.location.href = resp.url;
                        return;
                    }

                    // Procesar respuesta JSON
                    const responseData = await resp.json();

                    if (!resp.ok) {
                        throw new Error(responseData.error || "Error HTTP " + resp.status);
                    }

                    if (responseData.success) {
                        showMessage(membershipMessage, 'Membresía creada con éxito. Redirigiendo...', 'success');
                        // Redirigir después de 2 segundos
                        setTimeout(() => {
                            window.location.href = "/membership/membershipList";
                        }, 2000);
                    } else {
                        throw new Error(responseData.message || 'Error desconocido');
                    }
                } catch (err) {
                    console.error('Error completo:', err);
                    showMessage(membershipMessage, 'Error al crear membresía: ' + err.message, 'error');
                } finally {
                    // Restaurar el botón
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });

            // Manejar cambio en el tipo de membresía
            tipoMembresiaSelect.addEventListener("change", (e) => {
                const selectedOption = e.target.options[e.target.selectedIndex];
                maxIntegrantes = parseInt(selectedOption.dataset.max, 10);
                const precio = selectedOption.dataset.precio;

                // Mostrar precio en input
                precioFinalInput.value = `$${precio}`;
                // Guardar precio en campo oculto
                precioFinalHidden.value = precio;

                // Calcular fecha de fin si ya hay una fecha de inicio
                if (fechaInicioInput.value) {
                    calcularFechaFin();
                }

                // Si es familiar, mostrar sección de integrantes
                if (maxIntegrantes > 1) {
                    integrantesSection.classList.remove('hidden');
                    // Añadir campo para el primer integrante automáticamente
                    if (integrantesContainer.children.length === 0) {
                        addIntegranteBtn.click();
                    }
                } else {
                    integrantesSection.classList.add('hidden');
                    integrantesContainer.innerHTML = ''; // limpiar si cambia a individual
                }
            });

            // Calcular fecha de fin cuando cambia la fecha de inicio
            fechaInicioInput.addEventListener("change", calcularFechaFin);

            function calcularFechaFin() {
                if (!fechaInicioInput.value) return;

                const startDate = new Date(fechaInicioInput.value);
                const endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + duracionDias);

                const yyyy = endDate.getFullYear();
                const mm = String(endDate.getMonth() + 1).padStart(2, '0');
                const dd = String(endDate.getDate()).padStart(2, '0');

                fechaFinInput.value = `${yyyy}-${mm}-${dd}`;
            }

            // Botón para agregar integrantes
            addIntegranteBtn.addEventListener("click", () => {
                const currentIntegrantes = integrantesContainer.querySelectorAll(".integrante").length;

                if (currentIntegrantes < maxIntegrantes - 1) {
                    // -1 porque el cliente principal ya cuenta
                    const integranteDiv = document.createElement("div");
                    integranteDiv.classList.add("integrante", "flex", "items-center", "space-x-2", "mb-2");
                    integranteDiv.innerHTML = `
                        <input type="text" name="integrantes[]" placeholder="Nombre completo del integrante" required 
                               class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <button type="button" class="removeBtn px-3 py-2 border border-transparent rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            ❌ Eliminar
                        </button>
                    `;
                    integrantesContainer.appendChild(integranteDiv);

                    // Eliminar integrante
                    integranteDiv.querySelector(".removeBtn").addEventListener("click", () => {
                        integranteDiv.remove();
                        // Actualizar mensaje de máximo integrantes
                        const remaining = maxIntegrantes - 1 - integrantesContainer.querySelectorAll(".integrante").length;
                        if (remaining > 0) {
                            showMessage(membershipMessage, `Puede agregar hasta ${remaining} integrantes más`, 'success');
                            setTimeout(() => {
                                membershipMessage.classList.add('hidden');
                            }, 3000);
                        }
                    });
                } else {
                    showMessage(membershipMessage, `Máximo ${maxIntegrantes - 1} integrantes adicionales permitidos`, 'error');
                    setTimeout(() => {
                        membershipMessage.classList.add('hidden');
                    }, 3000);
                }
            });

            // Función para mostrar mensajes de estado
            function showMessage(element, text, type) {
                element.textContent = text;
                element.classList.remove('hidden', 'text-green-600', 'text-red-600');

                if (type === 'success') {
                    element.classList.add('text-green-600');
                } else {
                    element.classList.add('text-red-600');
                }

                // Ocultar mensaje después de 5 segundos
                setTimeout(() => {
                    element.classList.add('hidden');
                }, 5000);
            }

            // Disparar evento inicial (para que cargue precio en el inicio)
            tipoMembresiaSelect.dispatchEvent(new Event("change"));
        });
    </script>
</body>

</html>
