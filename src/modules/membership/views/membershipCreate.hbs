{{>navbar}}

<body class="bg-green-50 min-h-screen p-6">
    <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-md overflow-hidden mt-20 border border-green-200">
        <!-- Formulario de cliente -->
        <div class="p-6 border-b border-green-200">
            <h1 class="text-2xl font-bold text-green-800">Crear Cliente</h1>
            <form id="form-cliente" action="/memberships/createClient" method="POST" class="mt-4 space-y-4">
                <div>
                    <label class="block text-sm font-medium text-green-700">Nombre completo</label>
                    <input type="text" name="nombre_completo" required
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                </div>

                <div>
                    <label class="block text-sm font-medium text-green-700">Teléfono</label>
                    <input type="text" name="telefono"
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                </div>

                <div>
                    <label class="block text-sm font-medium text-green-700">Correo</label>
                    <input type="email" name="correo" required
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                </div>

                <button type="submit"
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    Registrar Cliente
                </button>

                <div id="cliente-message" class="hidden text-sm font-medium"></div>
            </form>
        </div>

        <!-- Formulario de membresía -->
        <div class="p-6">
            <h1 class="text-2xl font-bold text-green-800">Crear Membresía</h1>
            <form id="createMemberForm" action="/memberships/createMembership" method="POST" class="mt-4 space-y-4">
                <input type="hidden" id="id_cliente" name="id_cliente" value="">

                <div>
                    <label class="block text-sm font-medium text-green-700">Tipo de membresía:</label>
                    <select id="tipoMembresia" name="id_tipo_membresia" required
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                        {{#each tiposMembresia}}
                        <option value="{{id_tipo_membresia}}" data-max="{{max_integrantes}}" data-precio="{{precio}}">
                            {{nombre}} - ${{precio}}
                        </option>
                        {{/each}}
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-green-700">Fecha de inicio:</label>
                    <input type="date" id="fecha_inicio" name="fecha_inicio" required
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                </div>

                <div>
                    <label class="block text-sm font-medium text-green-700">Fecha de fin:</label>
                    <input type="date" id="fecha_fin" name="fecha_fin" readonly
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm bg-green-50">
                </div>

                <input type="hidden" id="precio_final" name="precio_final" value="">

                <div id="integrantesSection" class="hidden mt-4 p-4 border border-green-200 rounded-md bg-green-50">
                    <h4 class="text-sm font-medium text-green-700 mb-2">Integrantes familiares</h4>
                    <div id="integrantesContainer" class="space-y-2"></div>
                    <button type="button" id="addIntegranteBtn"
                        class="mt-2 inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-green-700 bg-green-100 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        ➕ Agregar integrante
                    </button>
                </div>

                <div>
                    <label class="block text-sm font-medium text-green-700">Método de pago:</label>
                    <select id="metodo_pago" name="metodo_pago" required
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                        {{#each tiposPago}}
                        <option value="{{id_metodo_pago}}">{{nombre}}</option>
                        {{/each}}
                    </select>
                </div>

                <div class="mt-4">
                    <label class="block text-sm font-medium text-green-700">Precio final:</label>
                    <input type="text" id="precioFinal" readonly
                        class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm bg-green-50">
                </div>

                {{#if isAdmin}}
                <div class="flex items-end space-x-2">
                    <div class="flex-1">
                        <label class="block text-sm font-medium text-green-700">Descuento (%):</label>
                        <input type="number" id="descuento" name="descuento" min="0" max="100" value="0"
                            class="mt-1 block w-full px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                    </div>
                    <button type="button" id="aplicarDescuentoBtn"
                        class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Aplicar
                    </button>
                </div>
                {{/if}}

                <button type="submit" id="submit-membership" disabled
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-400 hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400">
                    Crear Membresía (complete primero el cliente)
                </button>

                <div id="membership-message" class="hidden text-sm font-medium"></div>
            </form>
        </div>
    </div>

    <!-- Modal para confirmación de cliente -->
    <div id="clienteModal" class="fixed inset-0 bg-black bg-opacity-50 max-h-[80vh] overflow-y-auto items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 class="text-lg font-bold text-green-800 mb-4">Confirmar Datos del Cliente</h3>
            <div id="clienteModalContent" class="mb-4 space-y-2"></div>
            <div class="flex justify-end space-x-3">
                <button id="cancelClienteBtn"
                    class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancelar</button>
                <button id="confirmClienteBtn"
                    class="px-4 py-2 bg-green-600 text-white rounded-md text-sm hover:bg-green-700">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmación de membresía -->
    <div id="membershipModal" class="fixed inset-0 bg-black bg-opacity-50 max-h-[80vh] overflow-y-auto items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md max-h-[80vh] overflow-y-auto">
            <h3 class="text-lg font-bold text-green-800 mb-4">Confirmar Membresía</h3>
            <div id="membershipModalContent" class="mb-4 space-y-2"></div>
            <div class="flex justify-end space-x-3">
                <button id="cancelMembershipBtn"
                    class="px-4 py-2 text-sm text-gray-600 hover:text-gray-800">Cancelar</button>
                <button id="confirmMembershipBtn"
                    class="px-4 py-2 bg-green-600 text-white rounded-md text-sm hover:bg-green-700">Confirmar</button>
            </div>
        </div>
    </div>

    <script>document.addEventListener("DOMContentLoaded", () => {
            // Referencias a elementos del DOM
            const formCliente = document.getElementById("form-cliente");
            const formMembership = document.getElementById("createMemberForm");
            const clienteMessage = document.getElementById("cliente-message");
            const membershipMessage = document.getElementById("membership-message");
            const idClienteInput = document.getElementById("id_cliente");
            const submitMembershipBtn = document.getElementById("submit-membership");
            const tipoMembresiaSelect = document.getElementById("tipoMembresia");
            const integrantesSection = document.getElementById("integrantesSection");
            const integrantesContainer = document.getElementById("integrantesContainer");
            const addIntegranteBtn = document.getElementById("addIntegranteBtn");
            const precioFinalInput = document.getElementById("precioFinal");
            const precioFinalHidden = document.getElementById("precio_final");
            const fechaInicioInput = document.getElementById("fecha_inicio");
            const fechaFinInput = document.getElementById("fecha_fin");
            const descuentoInput = document.getElementById("descuento");
            const aplicarDescuentoBtn = document.getElementById("aplicarDescuentoBtn");
            const clienteModal = document.getElementById("clienteModal");
            const clienteModalContent = document.getElementById("clienteModalContent");
            const cancelClienteBtn = document.getElementById("cancelClienteBtn");
            const confirmClienteBtn = document.getElementById("confirmClienteBtn");
            const membershipModal = document.getElementById("membershipModal");
            const membershipModalContent = document.getElementById(
                "membershipModalContent"
            );
            const cancelMembershipBtn = document.getElementById("cancelMembershipBtn");
            const confirmMembershipBtn = document.getElementById("confirmMembershipBtn");

            // Establecer fecha mínima como hoy
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, "0");
            const dd = String(today.getDate()).padStart(2, "0");
            fechaInicioInput.min = `${yyyy}-${mm}-${dd}`;

            let maxIntegrantes = 1;
            let clienteRegistrado = false;
            const duracionDias = 30;
            let precioBase = 0;
            let descuentoAplicado = 0;

            // Manejar envío del formulario de cliente
            formCliente.addEventListener("submit", (e) => {
                e.preventDefault();
                mostrarModalCliente();
            });

            // Mostrar modal de confirmación para cliente
            function mostrarModalCliente() {
                const formData = new FormData(formCliente);
                const nombre = formData.get("nombre_completo");
                const telefono = formData.get("telefono") || "No proporcionado";
                const correo = formData.get("correo");

                clienteModalContent.innerHTML = `
                    <p><strong>Nombre:</strong> ${nombre}</p>
                    <p><strong>Teléfono:</strong> ${telefono}</p>
                    <p><strong>Correo:</strong> ${correo}</p>
                `;

                clienteModal.classList.remove("hidden");
            }

            // Confirmar creación de cliente
            confirmClienteBtn.addEventListener("click", async () => {
                clienteModal.classList.add("hidden");
                const submitBtn = formCliente.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;

                try {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = "Procesando...";

                    const formData = new FormData(formCliente);
                    console.log(
                        "Enviando datos del formulario:",
                        Object.fromEntries(formData.entries())
                    );

                    const resp = await fetch(formCliente.action, {
                        method: "POST",
                        body: new URLSearchParams(formData),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded",
                        },
                    });

                    const responseData = await resp.json();
                    console.log("Respuesta del servidor:", responseData);

                    if (!resp.ok) {
                        const errorMsg =
                            responseData.error || responseData.message || "Error desconocido";
                        throw new Error(errorMsg);
                    }

                    if (responseData.id_cliente) {
                        idClienteInput.value = responseData.id_cliente;
                        clienteRegistrado = true;

                        submitMembershipBtn.disabled = false;
                        submitMembershipBtn.classList.remove(
                            "bg-gray-400",
                            "hover:bg-gray-400",
                            "focus:ring-gray-400"
                        );
                        submitMembershipBtn.classList.add(
                            "bg-green-600",
                            "hover:bg-green-700",
                            "focus:ring-green-500"
                        );
                        submitMembershipBtn.textContent = "Crear Membresía";

                        showMessage(
                            clienteMessage,
                            "Cliente registrado con éxito. Ahora puede crear la membresía.",
                            "success"
                        );
                        formMembership.scrollIntoView({ behavior: "smooth" });

                        console.log("ID del cliente registrado:", responseData.id_cliente);
                    } else {
                        throw new Error("No se recibió un ID de cliente válido");
                    }
                } catch (err) {
                    console.error("Error al registrar cliente:", err);
                    showMessage(clienteMessage, `Error: ${err.message}`, "error");
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });

            // Cancelar creación de cliente
            cancelClienteBtn.addEventListener("click", () => {
                clienteModal.classList.add("hidden");
            });

            // Manejar envío del formulario de membresía
            formMembership.addEventListener("submit", (e) => {
                e.preventDefault();
                if (!clienteRegistrado) {
                    showMessage(
                        membershipMessage,
                        "Debe registrar un cliente primero",
                        "error"
                    );
                    return;
                }
                mostrarModalMembresia();
            });

            // Mostrar modal de confirmación para membresía
            function mostrarModalMembresia() {
                const formData = new FormData(formMembership);
                const tipoMembresiaText =
                    tipoMembresiaSelect.options[tipoMembresiaSelect.selectedIndex].text;
                const fechaInicio = formData.get("fecha_inicio");
                const fechaFin = fechaFinInput.value;
                const metodoPagoText =
                    document.getElementById("metodo_pago").options[
                        document.getElementById("metodo_pago").selectedIndex
                    ].text;
                const precioFinal = precioFinalInput.value;

                let integrantesHTML = "";
                const integrantes = document.querySelectorAll(
                    'input[name="integrantes[]"]'
                );
                if (integrantes.length > 0) {
                    integrantesHTML =
                        '<p><strong>Integrantes:</strong></p><ul class="list-disc pl-5 mt-1">';
                    integrantes.forEach((integrante) => {
                        integrantesHTML += `<li>${integrante.value}</li>`;
                    });
                    integrantesHTML += "</ul>";
                }

                membershipModalContent.innerHTML = `
                    <p><strong>Tipo de membresía:</strong> ${tipoMembresiaText}</p>
                    <p><strong>Fecha de inicio:</strong> ${fechaInicio}</p>
                    <p><strong>Fecha de fin:</strong> ${fechaFin}</p>
                    <p><strong>Método de pago:</strong> ${metodoPagoText}</p>
                    <p><strong>Precio final:</strong> ${precioFinal}</p>
                    ${integrantesHTML}
                    ${descuentoAplicado > 0
                        ? `<p><strong>Descuento aplicado:</strong> ${descuentoAplicado}%</p>`
                        : ""
                    }
                `;

                membershipModal.classList.remove("hidden");
            }

            // Confirmar creación de membresía
            confirmMembershipBtn.addEventListener("click", async () => {
                membershipModal.classList.add("hidden");
                const submitBtn = formMembership.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;

                try {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = "Procesando...";

                    const idClienteValue = idClienteInput.value;
                    if (!idClienteValue || isNaN(idClienteValue)) {
                        showMessage(
                            membershipMessage,
                            "Error: ID de cliente inválido. Por favor, registre el cliente nuevamente.",
                            "error"
                        );
                        return;
                    }

                    const fechaInicio = new Date(fechaInicioInput.value);
                    if (fechaInicio < new Date().setHours(0, 0, 0, 0)) {
                        showMessage(
                            membershipMessage,
                            "Error: La fecha de inicio no puede ser anterior a hoy",
                            "error"
                        );
                        return;
                    }

                    if (maxIntegrantes > 1) {
                        const integrantes = document.querySelectorAll(
                            'input[name="integrantes[]"]'
                        );
                        if (integrantes.length === 0) {
                            showMessage(
                                membershipMessage,
                                "Error: Debe agregar al menos un integrante familiar",
                                "error"
                            );
                            return;
                        }

                        for (let integrante of integrantes) {
                            if (!integrante.value.trim()) {
                                showMessage(
                                    membershipMessage,
                                    "Error: Todos los integrantes deben tener un nombre",
                                    "error"
                                );
                                return;
                            }
                        }
                    }

                    const formData = new FormData(formMembership);
                    const formDataObj = {};
                    for (let [key, value] of formData.entries()) {
                        formDataObj[key] = value;
                        console.log(`${key}: ${value} (tipo: ${typeof value})`);
                    }

                    const resp = await fetch(formMembership.action, {
                        method: "POST",
                        body: new URLSearchParams(formData),
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/x-www-form-urlencoded",
                        },
                    });

                    if (resp.redirected) {
                        window.location.href = resp.url;
                        return;
                    }

                    const responseData = await resp.json();

                    if (!resp.ok) {
                        throw new Error(responseData.error || "Error HTTP " + resp.status);
                    }

                    if (responseData.success) {
                        showMessage(
                            membershipMessage,
                            "Membresía creada con éxito. Redirigiendo...",
                            "success"
                        );
                        setTimeout(() => {
                            window.location.href = "/membership/membershipList";
                        }, 2000);
                    } else {
                        throw new Error(responseData.message || "Error desconocido");
                    }
                } catch (err) {
                    console.error("Error completo:", err);
                    showMessage(
                        membershipMessage,
                        "Error al crear membresía: " + err.message,
                        "error"
                    );
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });

            // Cancelar creación de membresía
            cancelMembershipBtn.addEventListener("click", () => {
                membershipModal.classList.add("hidden");
            });

            // Manejar cambio en el tipo de membresía
            tipoMembresiaSelect.addEventListener("change", (e) => {
                const selectedOption = e.target.options[e.target.selectedIndex];
                maxIntegrantes = parseInt(selectedOption.dataset.max, 10);
                precioBase = parseFloat(selectedOption.dataset.precio);

                aplicarPrecioConDescuento();

                if (fechaInicioInput.value) {
                    calcularFechaFin();
                }

                if (maxIntegrantes > 1) {
                    integrantesSection.classList.remove("hidden");
                    if (integrantesContainer.children.length === 0) {
                        addIntegranteBtn.click();
                    }
                } else {
                    integrantesSection.classList.add("hidden");
                    integrantesContainer.innerHTML = "";
                }
            });

            // Calcular fecha de fin
            fechaInicioInput.addEventListener("change", calcularFechaFin);

            function calcularFechaFin() {
                if (!fechaInicioInput.value) return;

                const startDate = new Date(fechaInicioInput.value);
                const endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + duracionDias);

                const yyyy = endDate.getFullYear();
                const mm = String(endDate.getMonth() + 1).padStart(2, "0");
                const dd = String(endDate.getDate()).padStart(2, "0");

                fechaFinInput.value = `${yyyy}-${mm}-${dd}`;
            }

            // Botón para agregar integrantes
            addIntegranteBtn.addEventListener("click", () => {
                const currentIntegrantes =
                    integrantesContainer.querySelectorAll(".integrante").length;

                if (currentIntegrantes < maxIntegrantes - 1) {
                    const integranteDiv = document.createElement("div");
                    integranteDiv.classList.add(
                        "integrante",
                        "flex",
                        "items-center",
                        "space-x-2",
                        "mb-2"
                    );
                    integranteDiv.innerHTML = `
                        <input type="text" name="integrantes[]" placeholder="Nombre completo del integrante" required 
                               class="flex-1 px-3 py-2 border border-green-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                        <button type="button" class="removeBtn px-3 py-2 border border-transparent rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            ❌ Eliminar
                        </button>
                    `;
                    integrantesContainer.appendChild(integranteDiv);

                    integranteDiv
                        .querySelector(".removeBtn")
                        .addEventListener("click", () => {
                            integranteDiv.remove();
                            const remaining =
                                maxIntegrantes -
                                1 -
                                integrantesContainer.querySelectorAll(".integrante").length;
                            if (remaining > 0) {
                                showMessage(
                                    membershipMessage,
                                    `Puede agregar hasta ${remaining} integrantes más`,
                                    "success"
                                );
                                setTimeout(() => {
                                    membershipMessage.classList.add("hidden");
                                }, 3000);
                            }
                        });
                } else {
                    showMessage(
                        membershipMessage,
                        `Máximo ${maxIntegrantes - 1} integrantes adicionales permitidos`,
                        "error"
                    );
                    setTimeout(() => {
                        membershipMessage.classList.add("hidden");
                    }, 3000);
                }
            });

            // Aplicar descuento (solo para admin)
            if (aplicarDescuentoBtn) {
                aplicarDescuentoBtn.addEventListener("click", () => {
                    const descuento = parseInt(descuentoInput.value) || 0;
                    if (descuento < 0 || descuento > 100) {
                        showMessage(
                            membershipMessage,
                            "El descuento debe estar entre 0 y 100%",
                            "error"
                        );
                        return;
                    }

                    descuentoAplicado = descuento;
                    aplicarPrecioConDescuento();
                    showMessage(
                        membershipMessage,
                        `Descuento del ${descuento}% aplicado correctamente`,
                        "success"
                    );
                });
            }

            function aplicarPrecioConDescuento() {
                if (precioBase) {
                    const precioConDescuento =
                        precioBase - precioBase * (descuentoAplicado / 100);
                    precioFinalInput.value = `$${precioConDescuento.toFixed(2)}`;
                    precioFinalHidden.value = precioConDescuento.toFixed(2);
                }
            }

            // Función para mostrar mensajes de estado
            function showMessage(element, text, type) {
                element.textContent = text;
                element.classList.remove("hidden", "text-green-600", "text-red-600");

                if (type === "success") {
                    element.classList.add("text-green-600");
                } else {
                    element.classList.add("text-red-600");
                }

                setTimeout(() => {
                    element.classList.add("hidden");
                }, 5000);
            }

            // Disparar evento inicial
            tipoMembresiaSelect.dispatchEvent(new Event("change"));
        });
    </script>
</body>

</html>