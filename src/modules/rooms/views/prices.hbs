{{>navbar}}

<div class="max-w-7xl mx-auto px-2 sm:px-3 pt-24 sm:pt-28 pb-28 sm:pb-32">
  <!-- Header -->
  <header class="text-center py-2 sm:py-4">
    <h1 id="pricesHeaderTitle" class="text-lg sm:text-xl lg:text-2xl font-extrabold text-blue-900 mb-1 sm:mb-2 opacity-0 translate-y-1 transition-all duration-500">
      Precios de Habitaciones
    </h1>
    <div class="flex items-center justify-center">
      <a id="pricesBackLink" href="/rooms" class="group inline-flex items-center gap-1.5 text-xs sm:text-sm text-blue-700 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 px-2.5 py-1 rounded-full border border-blue-200 transition-all duration-500 opacity-0 translate-y-1">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" class="w-4 h-4 sm:w-5 sm:h-5 opacity-90 transition-transform duration-200 group-hover:-translate-x-0.5 shrink-0">
          <path d="M10.5 6l-6 6 6 6 1.06-1.06L7.62 13H21v-2H7.62l3.94-3.94L10.5 6z"/>
        </svg>
        <span class="font-medium">Volver</span>
      </a>
    </div>
  </header>

  <!-- Loading Overlay (como en Habitaciones) -->
  <div id="pricesLoadingOverlay" class="fixed inset-0 z-[60] bg-white/80 backdrop-blur-sm flex items-center justify-center">
    <div class="flex flex-col items-center gap-3">
      <svg class="w-10 h-10 text-blue-700 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" role="img">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
      </svg>
      <p class="text-sm text-blue-900 font-medium">Cargando precios...</p>
    </div>
  </div>

  <!-- Desktop Table View (hidden to use cards layout on desktop) -->
  <div class="hidden">
    <div class="overflow-x-auto">
      <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <table class="min-w-full">
          <thead class="bg-blue-900 text-white">
            <tr>
              <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider">
                <span class="inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                    <path d="M21 10.5V21h-2.25v-4.5H5.25V21H3V10.5L12 4l9 6.5z"/>
                  </svg>
                  <span>Tipo de Habitaci√≥n</span>
                </span>
              </th>
              <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider">
                <span class="inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                    <path d="M7 2h10a2 2 0 012 2v2H5V4a2 2 0 012-2zm12 6H5v12a2 2 0 002 2h10a2 2 0 002-2V8zm-4 3h2v2h-2v-2z"/>
                  </svg>
                  <span>Mes</span>
                </span>
              </th>
              <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider">
                <span class="inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                    <path d="M12 2a10 10 0 100 20 10 10 0 000-20zm.75 5v1.5h1.5a.75.75 0 010 1.5h-1.5v2.25h1.5a.75.75 0 010 1.5h-1.5V16a.75.75 0 01-1.5 0v-1.75h-1.5a.75.75 0 010-1.5h1.5V7a.75.75 0 011.5 0z"/>
                  </svg>
                  <span>Precio ($)</span>
                </span>
              </th>
              <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider">
                <span class="inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                    <path d="M5 4h14v2H5V4zm0 4h14v2H5V8zm0 4h9v2H5v-2z"/>
                  </svg>
                  <span>Acciones</span>
                </span>
              </th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            {{#each meses}}
              <tr class="hover:bg-blue-50 price-reveal opacity-0 translate-y-1 transition-all duration-500">
                <td class="px-6 py-4 text-gray-900 font-medium">Individual</td>
                <td class="px-6 py-4 text-gray-700"><span class="js-month" data-month="{{this.mes}}">{{this.mes}}</span></td>
                <td class="px-6 py-4">
                  <input type="number" value="{{this.sencilla}}" min="0" step="1"
                         class="w-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right"
                         data-tipo="sencilla" data-mes="{{this.mes}}">
                </td>
                <td class="px-6 py-4">
                  <button class="group inline-flex items-center gap-1.5 px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                      <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                    </svg>
                    <span>Guardar</span>
                  </button>
                </td>
              </tr>
              <tr class="hover:bg-blue-50 price-reveal opacity-0 translate-y-1 transition-all duration-500">
                <td class="px-6 py-4 text-gray-900 font-medium">Suite</td>
                <td class="px-6 py-4 text-gray-700"><span class="js-month" data-month="{{this.mes}}">{{this.mes}}</span></td>
                <td class="px-6 py-4">
                  <input type="number" value="{{this.suite}}" min="0" step="1"
                         class="w-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right"
                         data-tipo="suite" data-mes="{{this.mes}}">
                </td>
                <td class="px-6 py-4">
                  <button class="group inline-flex items-center gap-1.5 px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                      <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                    </svg>
                    <span>Guardar</span>
                  </button>
                </td>
              </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Cards View (Tablet + Desktop) -->
  <div class="hidden md:block prices-content">
    <div class="grid items-stretch gap-6 xl:gap-8 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2">
      {{#each meses}}
        <div class="bg-white rounded-xl shadow-lg price-reveal opacity-0 translate-y-1 transition-all duration-500 h-full flex flex-col overflow-hidden">
          <div class="bg-blue-900 text-white px-3 py-2 rounded-t-xl">
            <h3 class="font-bold text-sm inline-flex items-center gap-1.5">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                <path d="M7 2h10a2 2 0 012 2v2H5V4a2 2 0 012-2zm12 6H5v12a2 2 0 002 2h10a2 2 0 002-2V8zm-4 3h2v2h-2v-2z"/>
              </svg>
              <span>Mes <span class="js-month" data-month="{{this.mes}}">{{this.mes}}</span></span>
            </h3>
          </div>
          <div class="p-6 flex-1">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 min-w-0">
            <!-- Individual -->
            <div class="space-y-2 min-w-0">
              <label class="text-sm font-medium text-gray-700 inline-flex items-center gap-1.5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-80 text-gray-700">
                  <path d="M3 10h14a2 2 0 012 2v6h-2v-2H5v2H3v-6a2 2 0 012-2zm3-4h6a2 2 0 012 2v2H4V8a2 2 0 012-2z"/>
                </svg>
                <span>Individual</span>
              </label>
              <div class="grid grid-cols-[1fr_auto] items-center gap-3 min-w-0">
                <input type="number" value="{{this.sencilla}}" min="0" step="1"
                       class="w-full min-w-0 h-10 px-3 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right"
                       data-tipo="sencilla" data-mes="{{this.mes}}">
                <button class="group inline-flex items-center gap-1.5 h-10 px-3 lg:px-2.5 text-sm bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium whitespace-nowrap transition-colors duration-200 shrink-0">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                    <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                  </svg>
                  <span>Guardar</span>
                </button>
              </div>
            </div>
            <!-- Suite -->
            <div class="space-y-2">
              <label class="text-sm font-medium text-gray-700 inline-flex items-center gap-1.5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-80">
                  <path d="M3 10h14a2 2 0 012 2v6h-2v-2H5v2H3v-6a2 2 0 012-2zm3-4h6a2 2 0 012 2v2H4V8a2 2 0 012-2z"/>
                </svg>
                <span>Suite</span>
              </label>
              <div class="grid grid-cols-[1fr_auto] items-center gap-3 min-w-0">
                <input type="number" value="{{this.suite}}" min="0" step="0.01"
                       class="w-full min-w-0 h-10 px-3 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right"
                       data-tipo="suite" data-mes="{{this.mes}}">
                <button class="group inline-flex items-center gap-1.5 h-10 px-3 lg:px-2.5 text-sm bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium whitespace-nowrap transition-colors duration-200 shrink-0">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                    <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                  </svg>
                  <span>Guardar</span>
                </button>
              </div>
            </div>
            </div>
          </div>
        </div>
      {{/each}}
    </div>
  </div>

  <!-- Mobile View -->
  <div class="block md:hidden prices-content">
    <div class="space-y-4">
      {{#each meses}}
        <div class="bg-white rounded shadow-md overflow-hidden price-reveal opacity-0 translate-y-1 transition-all duration-500">
          <div class="bg-blue-900 text-white px-3 py-2">
            <h3 class="font-bold text-sm inline-flex items-center gap-1.5">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90">
                <path d="M7 2h10a2 2 0 012 2v2H5V4a2 2 0 012-2zm12 6H5v12a2 2 0 002 2h10a2 2 0 002-2V8zm-4 3h2v2h-2v-2z"/>
              </svg>
              <span>Mes <span class="js-month" data-month="{{this.mes}}">{{this.mes}}</span></span>
            </h3>
          </div>
          <div class="p-3 space-y-3">
            <!-- Individual -->
            <div class="border-b border-gray-200 pb-2">
              <div class="flex justify-between items-center mb-1">
                <span class="text-sm font-medium text-gray-900 inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-80">
                    <path d="M3 10h14a2 2 0 012 2v6h-2v-2H5v2H3v-6a2 2 0 012-2zm3-4h6a2 2 0 012 2v2H4V8a2 2 0 012-2z"/>
                  </svg>
                  <span>Individual</span>
                </span>
              </div>
              <div class="flex gap-2">
                <div class="flex-1">
                  <input type="number" value="{{this.sencilla}}" min="0" step="1"
                         class="w-full px-2 py-2 border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-right text-sm"
                         data-tipo="sencilla" data-mes="{{this.mes}}"
                         placeholder="0">
                </div>
                <button class="group inline-flex items-center gap-1.5 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-xs font-medium whitespace-nowrap transition-colors duration-200">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                    <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                  </svg>
                  <span>Guardar</span>
                </button>
              </div>
            </div>
            <!-- Suite -->
            <div>
              <div class="flex justify-between items-center mb-1">
                <span class="text-sm font-medium text-gray-900 inline-flex items-center gap-1.5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-80">
                    <path d="M3 10h14a2 2 0 012 2v6h-2v-2H5v2H3v-6a2 2 0 012-2zm3-4h6a2 2 0 012 2v2H4V8a2 2 0 012-2z"/>
                  </svg>
                  <span>Suite</span>
                </span>
              </div>
              <div class="flex gap-2">
                <div class="flex-1">
                  <input type="number" value="{{this.suite}}" min="0" step="1"
                         class="w-full px-2 py-2 border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-right text-sm"
                         data-tipo="suite" data-mes="{{this.mes}}"
                         placeholder="0">
                </div>
                <button class="group inline-flex items-center gap-1.5 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded text-xs font-medium whitespace-nowrap transition-colors duration-200">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-90 transition-transform duration-200 group-hover:scale-110">
                    <path d="M17 3H7a2 2 0 00-2 2v14l7-3 7 3V5a2 2 0 00-2-2z"/>
                  </svg>
                  <span>Guardar</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      {{/each}}
    </div>
  </div>

  <!-- Spacer to avoid overlap with fixed/sticky footer on small screens -->
  <div class="h-16 sm:h-20 md:h-24" style="padding-bottom: env(safe-area-inset-bottom);"></div>

{{>footer}}

<script>
  // Variables globales
  // Reveal header elements smoothly on load
  document.addEventListener('DOMContentLoaded', () => {
    const title = document.getElementById('pricesHeaderTitle');
    const back = document.getElementById('pricesBackLink');
    const overlay = document.getElementById('pricesLoadingOverlay');
    // next frame to allow transitions
    requestAnimationFrame(() => {
      if (title) {
        title.classList.remove('opacity-0', 'translate-y-1');
        title.classList.add('opacity-100', 'translate-y-0');
      }
      setTimeout(() => {
        if (back) {
          back.classList.remove('opacity-0', 'translate-y-1');
          back.classList.add('opacity-100', 'translate-y-0');
        }
      }, 80);
    });

    // Ocultar overlay despu√©s de un breve tiempo para evitar parpadeo
    setTimeout(() => {
      if (overlay) overlay.classList.add('hidden');
    }, 300);

    // Reveal rows/cards on scroll like in Habitaciones
    const items = Array.from(document.querySelectorAll('.price-reveal'));
    if (!('IntersectionObserver' in window) || items.length === 0) {
      items.forEach(el => el.classList.remove('opacity-0', 'translate-y-1'));
    } else {
      const io = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove('opacity-0', 'translate-y-1');
            entry.target.classList.add('opacity-100', 'translate-y-0');
            io.unobserve(entry.target);
          }
        });
      }, { threshold: 0.12 });
      items.forEach((el, idx) => {
        el.style.transitionDelay = `${Math.min(idx * 20, 200)}ms`;
        io.observe(el);
      });
    }

    // Convert numeric month to Spanish month name in all .js-month elements
    const monthNames = {
      '1': 'Enero', '2': 'Febrero', '3': 'Marzo', '4': 'Abril', '5': 'Mayo', '6': 'Junio',
      '7': 'Julio', '8': 'Agosto', '9': 'Septiembre', '10': 'Octubre', '11': 'Noviembre', '12': 'Diciembre'
    };
    document.querySelectorAll('.js-month').forEach(el => {
      const raw = (el.dataset.month ?? el.textContent ?? '').toString().trim();
      const normalized = raw.replace(/^0+/, '');
      if (monthNames[normalized]) {
        el.textContent = monthNames[normalized];
      }
    });

    // === Sistema de modificaci√≥n de precios ===
    let changedInputs = new Set();
    const inputs = document.querySelectorAll('input[type="number"]');
    const saveButtons = document.querySelectorAll('button:not([type="button"])');

    // Funci√≥n para mostrar notificaciones
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 ${
      type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500'
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Funci√≥n para actualizar precio individual
  async function updatePrice(tipo, mes, monto, button) {
    const originalHTML = button.innerHTML;
    button.innerHTML = '<span>Guardando...</span>';
    button.disabled = true;

    try {
      const response = await fetch('/api/rooms/update-precio', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ tipo, mes, monto })
      });

      const data = await response.json();

      if (data.success) {
        showNotification(`Precio actualizado correctamente`, 'success');
        changedInputs.delete(`${tipo}-${mes}`);
        updateChangedInputsStyle();
      } else {
        showNotification(data.error || 'Error al actualizar el precio', 'error');
      }
    } catch (error) {
      showNotification('Error de conexi√≥n', 'error');
      console.error('Error:', error);
    } finally {
      button.innerHTML = originalHTML;
      button.disabled = false;
    }
  }

  // Funci√≥n para guardar todos los cambios
  async function saveAllChanges() {
    const changes = [];
    changedInputs.forEach(key => {
      const [tipo, mes] = key.split('-');
      const input = document.querySelector(`input[data-tipo="${tipo}"][data-mes="${mes}"]`);
      if (input) {
        changes.push({
          tipo,
          mes,
          monto: input.value
        });
      }
    });

    if (changes.length === 0) {
      showNotification('No hay cambios para guardar', 'info');
      return;
    }

    try {
      const response = await fetch('/api/rooms/update-precios-bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ changes })
      });

      const data = await response.json();

      if (data.success) {
        showNotification(`${changes.length} precios actualizados correctamente`, 'success');
        changedInputs.clear();
        updateChangedInputsStyle();
      } else {
        showNotification('Error al actualizar los precios', 'error');
      }
    } catch (error) {
      showNotification('Error de conexi√≥n', 'error');
      console.error('Error:', error);
    }
  }

  // Funci√≥n para actualizar estilos de inputs modificados
  function updateChangedInputsStyle() {
    inputs.forEach(input => {
      const key = `${input.dataset.tipo}-${input.dataset.mes}`;
      if (changedInputs.has(key)) {
        input.classList.add('border-yellow-400', 'bg-yellow-50');
      } else {
        input.classList.remove('border-yellow-400', 'bg-yellow-50');
      }
    });
  }

  // Event listeners para inputs
  inputs.forEach(input => {
    const originalValue = input.value;

    input.addEventListener('input', () => {
      const key = `${input.dataset.tipo}-${input.dataset.mes}`;
      if (input.value !== originalValue) {
        changedInputs.add(key);
      } else {
        changedInputs.delete(key);
      }
      updateChangedInputsStyle();
    });

    // Validaci√≥n en tiempo real
    input.addEventListener('blur', () => {
      const value = parseFloat(input.value);
      if (isNaN(value) || value < 0) {
        input.value = originalValue;
        showNotification('Precio inv√°lido. Se restaur√≥ el valor original.', 'error');
      }
    });
  });

  // Event listeners para botones individuales de guardar
  document.addEventListener('click', (e) => {
    const button = e.target.closest('button');
    
    if (button && button.textContent.includes('Guardar') && !button.textContent.includes('Todos')) {
      // Buscar el input: primero intentar en el mismo contenedor padre
      let input = button.parentElement?.querySelector('input[type="number"]');
      
      // Si no lo encuentra, buscar en el contenedor padre del padre
      if (!input) {
        const parent = button.parentElement;
        if (parent) {
          const grandParent = parent.parentElement;
          input = grandParent?.querySelector('input[type="number"]');
        }
      }
      
      if (input) {
        const tipo = input.dataset.tipo;
        const mes = input.dataset.mes;
        const monto = input.value;
        updatePrice(tipo, mes, monto, button);
      }
    }
  });

  // Event listener para guardar todos los cambios
  document.addEventListener('click', (e) => {
    if (e.target.textContent.includes('Guardar Todos')) {
      saveAllChanges();
    }
  });

  // Event listener para restablecer valores
  document.addEventListener('click', (e) => {
    if (e.target.textContent.includes('Restablecer')) {
      if (confirm('¬øEst√°s seguro de que quieres restablecer todos los valores?')) {
        location.reload();
      }
    }
  });

  // Advertencia antes de salir si hay cambios sin guardar
  window.addEventListener('beforeunload', (e) => {
    if (changedInputs.size > 0) {
      e.preventDefault();
      e.returnValue = 'Tienes cambios sin guardar. ¬øEst√°s seguro de que quieres salir?';
    }
  });

  // Atajos de teclado
  document.addEventListener('keydown', (e) => {
    // Ctrl+S para guardar todos los cambios
    if (e.ctrlKey && e.key === 's') {
      e.preventDefault();
      saveAllChanges();
    }

    // Escape para restablecer
    if (e.key === 'Escape') {
      if (changedInputs.size > 0 && confirm('¬øRestablecer todos los cambios?')) {
        location.reload();
      }
    }
  });

  // Sistema de precios inicializado
});  // Fin de DOMContentLoaded
</script>
