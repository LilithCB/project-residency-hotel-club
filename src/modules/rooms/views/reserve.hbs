
<div class="min-h-screen flex items-center justify-center bg-gray-100 p-4 pt-24">

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 z-[60] bg-white/80 backdrop-blur-sm flex items-center justify-center hidden">
    <div class="flex flex-col items-center gap-3">
      <svg class="w-10 h-10 text-blue-700 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" role="img">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
      </svg>
      <p id="loadingMessage" class="text-sm text-blue-900 font-medium">Cargando formulario...</p>
    </div>
  </div>

  <!-- Skeleton while loading -->
  <div id="reserveSkeleton" class="w-full sm:max-w-lg lg:max-w-xl bg-white p-6 rounded-lg sm:rounded-xl shadow-md ring-1 ring-slate-100 animate-pulse mb-4 hidden">
    <div class="h-6 w-44 bg-slate-200 rounded mb-4"></div>
    <div class="h-4 w-60 bg-slate-200 rounded mb-2"></div>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-3">
      <div class="h-10 bg-slate-200 rounded"></div>
      <div class="h-10 bg-slate-200 rounded"></div>
    </div>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-3">
      <div class="h-10 bg-slate-200 rounded"></div>
      <div class="h-10 bg-slate-200 rounded"></div>
    </div>
    <div class="mt-4 h-10 w-40 bg-slate-200 rounded"></div>
  </div>

  <form
    id="formReserve"
    action="/rooms/reservar/{{habitacion.id}}"
    method="POST"
    class="w-full sm:max-w-lg lg:max-w-xl bg-white p-0 rounded-lg sm:rounded-xl shadow-md overflow-hidden ring-1 ring-slate-100 transition-all duration-300 ease-out hover:shadow-xl hover:-translate-y-[1px]"
  >

    <!-- Header con gradiente, igual a rent.hbs -->
    <div class="bg-gradient-to-r from-blue-900 via-blue-800 to-blue-900 text-white px-3 py-3 sm:px-6 sm:py-4 lg:py-1.5">
      <div class="mb-2 lg:mb-1 flex items-center justify-start gap-2">
        <a href="/rooms" class="inline-flex items-center gap-2 text-sm sm:text-base hover:opacity-90 transition">
          <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 sm:w-5 sm:h-5" viewBox="0 0 24 24">
            <path fill-rule="evenodd" d="M10.03 3.97a.75.75 0 010 1.06L5.06 10h15.19a.75.75 0 010 1.5H5.06l4.97 4.97a.75.75 0 11-1.06 1.06l-6.25-6.25a.75.75 0 010-1.06l6.25-6.25a.75.75 0 011.06 0z" clip-rule="evenodd"/>
          </svg>
          Volver
        </a>
      </div>
      <h2 class="text-sm sm:text-lg md:text-xl lg:text-base font-bold flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 sm:w-5 sm:h-5 opacity-90" viewBox="0 0 24 24">
          <path d="M3.75 3a.75.75 0 000 1.5h.75v14.25A2.25 2.25 0 006.75 21h10.5A2.25 2.25 0 0019.5 18.75V4.5h.75a.75.75 0 000-1.5h-16.5zM9 6h6a.75.75 0 010 1.5H9A.75.75 0 019 6zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 9zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 12zm0 3h6a.75.75 0 010 1.5H9A.75.75 0 019 15z"/>
        </svg>
        Habitación {{habitacion.numero}} • {{habitacion.tipo}}
      </h2>
      <p class="text-blue-100 text-xs sm:text-sm lg:hidden">Complete los datos</p>
    </div>

    <div class="p-6">

    <input type="hidden" id="room_id" value="{{habitacion.id}}" />
    <input type="hidden" name="monto" value="0" />

    <!-- Cliente -->
    <div>
      <label
        for="nombre_cliente"
        class="block text-sm font-medium text-gray-700"
      >Nombre del cliente</label>
      <div class="relative group mt-1">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
          <path d="M12 12a5 5 0 100-10 5 5 0 000 10zm-7 9a7 7 0 0114 0v1H5v-1z" />
        </svg>
        <input
          id="nombre_cliente"
          name="nombre_cliente"
          required
          class="w-full pl-9 pr-3 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"
          placeholder="Nombre completo"
        />
      </div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <div>
        <label
          for="correo"
          class="block text-sm font-medium text-gray-700"
        >Correo electrónico</label>
        <div class="relative group mt-1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
            <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5a2.25 2.25 0 012.25 2.25v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zm2.776-.75A.026.026 0 004.25 6l7.75 5.167L19.75 6a.026.026 0 00-.026 0H4.276z"/>
          </svg>
          <input
            id="correo"
            name="correo"
            type="email"
            required
            class="w-full pl-9 pr-3 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"
            placeholder="correo@ejemplo.com"
          />
        </div>
      </div>
      <div>
        <label
          for="telefono"
          class="block text-sm font-medium text-gray-700"
        >Número de teléfono</label>
        <div class="relative group mt-1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
            <path d="M2.25 4.5A2.25 2.25 0 014.5 2.25h3A2.25 2.25 0 019.75 4.5v15A2.25 2.25 0 017.5 21.75h-3A2.25 2.25 0 012.25 19.5v-15zM6 18.75a.75.75 0 100 1.5.75.75 0 000-1.5z"/>
          </svg>
          <input
            id="telefono"
            name="telefono"
            type="tel"
            required
            class="w-full pl-9 pr-3 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"
            placeholder="10 dígitos"
          />
        </div>
      </div>
    </div>

    <!-- Fechas -->
    <fieldset class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <legend class="text-sm font-medium text-gray-700">Estancia</legend>
      <div>
        <label for="fecha_ingreso" class="block text-sm text-gray-700">Fecha de ingreso</label>
        <div class="relative group mt-1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
            <path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/>
          </svg>
          <input
            id="fecha_ingreso"
            type="date"
            required
            class="w-full pl-9 pr-3 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"
          />
          <input type="hidden" id="fecha_ingreso_with_time" name="fecha_ingreso" value=""/>
        </div>
      </div>
      <div>
        <label for="fecha_salida" class="block text-sm text-gray-700">Fecha de salida</label>
        <div class="relative group mt-1">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400 group-focus-within:text-blue-500 transition-colors">
            <path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/>
          </svg>
          <input
            id="fecha_salida"
            type="date"
            required
            class="w-full pl-9 pr-3 py-3 border border-slate-300 rounded-lg bg-white/90 focus:bg-white focus:ring-2 focus:ring-blue-400 focus:border-blue-400 outline-none transition-colors duration-200"
          />
          <input type="hidden" id="fecha_salida_with_time" name="fecha_salida" value=""/>
        </div>
      </div>
    </fieldset>

    <div id="duration-display" class="hidden bg-blue-50 border rounded-md p-2 mt-2">
      <span class="text-blue-800 text-sm">Duración: <span id="nights-count" class="font-medium">0</span> noches</span>
    </div>

    <!-- Precio y Pago (estilo tomado de rent.hbs) -->
    <div class="space-y-5 md:space-y-6">
      <!-- Campos de precio ocultos pero enviados al servidor -->
      <input id="price" name="price" type="hidden" value="0"/>
      <input id="price_text" name="price_text" type="hidden" value=""/>

      <!-- Enganche (Opcional) -->
      <section aria-labelledby="enganche-title" class="space-y-2 md:space-y-3">
        <h3 id="enganche-title" class="text-sm md:text-lg font-semibold text-gray-900 border-b pb-2 md:pb-2 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 text-green-600" viewBox="0 0 24 24">
            <path d="M12 7.5a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5z"/>
            <path fill-rule="evenodd" d="M1.5 4.875C1.5 3.839 2.34 3 3.375 3h17.25c1.035 0 1.875.84 1.875 1.875v9.75c0 1.036-.84 1.875-1.875 1.875H3.375A1.875 1.875 0 011.5 14.625v-9.75zM8.25 9.75a3.75 3.75 0 117.5 0 3.75 3.75 0 01-7.5 0zM18.75 9a.75.75 0 00-.75.75v.008c0 .414.336.75.75.75h.008a.75.75 0 00.75-.75V9.75a.75.75 0 00-.75-.75h-.008zM4.5 9.75A.75.75 0 015.25 9h.008a.75.75 0 01.75.75v.008a.75.75 0 01-.75.75H5.25a.75.75 0 01-.75-.75V9.75z" clip-rule="evenodd"/>
            <path d="M2.25 18a.75.75 0 000 1.5c5.4 0 10.63.722 15.6 2.075 1.19.324 2.4-.558 2.4-1.82V18.75a.75.75 0 00-.75-.75H2.25z"/>
          </svg>
          Enganche / Anticipo (Opcional)
        </h3>
        <div class="bg-green-50 border border-green-200 rounded-lg p-3 mb-3">
          <p class="text-xs text-green-800">
            <strong>💡 Nota:</strong> Si el cliente desea dejar un enganche para apartar la reservación, ingrésalo aquí. 
            Al convertir la reservación a renta, se descontará este monto del precio total.
          </p>
        </div>
        <div class="relative group">
          <span class="pointer-events-none absolute left-3 top-3.5 text-slate-400 text-sm transition-colors group-focus-within:text-green-500">$</span>
          <input id="enganche" name="enganche" type="number" step="0.01" min="0" placeholder="0.00" value="0"
            class="w-full pl-8 pr-3 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-slate-700 font-medium outline-none transition-colors duration-200"/>
          <input id="enganche_text" name="enganche_text" type="text" readonly placeholder="Enganche en letras"
            class="w-full pl-8 pr-3 py-3 border border-slate-300 rounded-lg bg-slate-50 text-slate-700 font-medium outline-none transition-colors duration-200 mt-3 tracking-wide"/>
        </div>
      </section>

    </div>

    <!-- Sección de Envío Automático Unificado -->
    <section aria-labelledby="envio-title" class="space-y-2 md:space-y-3">
      <h3 id="envio-title" class="text-sm md:text-lg font-semibold text-gray-900 border-b pb-2 md:pb-2 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4" viewBox="0 0 24 24">
          <path d="M1.5 4.5a3 3 0 013-3h1.372c.86 0 1.61.586 1.819 1.42l1.105 4.423a1.875 1.875 0 01-.694 1.955l-1.293.97c-.135.101-.164.249-.126.352a11.285 11.285 0 006.697 6.697c.103.038.25.009.352-.126l.97-1.293a1.875 1.875 0 011.955-.694l4.423 1.105c.834.209 1.42.959 1.42 1.82V19.5a3 3 0 01-3 3h-2.25C8.552 22.5 1.5 15.448 1.5 6.75V4.5z"/>
        </svg>
        Envío Automático
      </h3>
      
      <!-- Contenedor principal -->
      <div class="space-y-3">
        <!-- Email Automático -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <div class="flex items-center gap-2 text-blue-800">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-5 h-5" viewBox="0 0 24 24">
              <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5a2.25 2.25 0 012.25 2.25v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zm2.776-.75A.026.026 0 004.25 6l7.75 5.167L19.75 6a.026.026 0 00-.026 0H4.276z"/>
            </svg>
            <span class="font-medium">📧 Comprobante automático por Email</span>
          </div>
          <p class="text-sm text-blue-700 mt-1">
            Se enviará automáticamente al email proporcionado una vez creada la reservación.
          </p>
        </div>

        <!-- WhatsApp Automático -->
        <div class="bg-green-50 border border-green-200 rounded-lg p-3">
          <div class="flex items-center gap-2 text-green-800">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-5 h-5" viewBox="0 0 24 24">
              <path d="M1.5 4.5a3 3 0 013-3h1.372c.86 0 1.61.586 1.819 1.42l1.105 4.423a1.875 1.875 0 01-.694 1.955l-1.293.97c-.135.101-.164.249-.126.352a11.285 11.285 0 006.697 6.697c.103.038.25.009.352-.126l.97-1.293a1.875 1.875 0 011.955-.694l4.423 1.105c.834.209 1.42.959 1.42 1.82V19.5a3 3 0 01-3 3h-2.25C8.552 22.5 1.5 15.448 1.5 6.75V4.5z"/>
            </svg>
            <span class="font-medium">📱 Comprobante automático por WhatsApp</span>
          </div>
          <p class="text-sm text-green-700 mt-1">
            Se enviará automáticamente al número de teléfono proporcionado una vez creada la reservación.
          </p>
        </div>
      </div>

      <!-- Campos ocultos para mantener compatibilidad - AMBOS SIEMPRE ACTIVOS -->
      <input type="hidden" name="send_email" value="on">
      <input type="hidden" name="send_whatsapp" value="on">
    </section>

    <!-- Botones -->
    <div class="flex flex-col sm:flex-row gap-3 pt-4 border-t mt-5 md:justify-end">
      <a href="/rooms" class="w-full sm:w-auto px-6 border border-red-500 text-red-600 py-3 rounded-lg hover:bg-slate-50 active:scale-[0.98] transition inline-flex items-center justify-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path fill-rule="evenodd" d="M10.03 3.97a.75.75 0 010 1.06L5.06 10h15.19a.75.75 0 010 1.5H5.06l4.97 4.97a.75.75 0 11-1.06 1.06l-6.25-6.25a.75.75 0 010-1.06l6.25-6.25a.75.75 0 011.06 0z" clip-rule="evenodd"/></svg>
        Cancelar
      </a>
      <button type="submit" class="w-full sm:w-auto px-6 py-3 bg-green-600 text-white rounded-lg shadow-sm hover:shadow-md hover:bg-green-700 active:scale-[0.98] transition inline-flex items-center justify-center gap-2">

         <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5H12.75v6.75a.75.75 0 01-1.5 0V12.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z"/></svg>

        Crear
      </button>
    </div>
  </form>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const overlay = document.getElementById('loadingOverlay');
    const skeleton = document.getElementById('reserveSkeleton');
    const form = document.getElementById('formReserve');
    const hideOverlay = () => overlay && overlay.classList.add('hidden');
    // Dynamic center: set available height between navbar and footer on desktop
    const centerRoot = document.getElementById('center-root');
    function applyDesktopCenter() {
      if (!centerRoot) return;
      const isDesktop = window.matchMedia('(min-width: 1024px)').matches;
      if (!isDesktop) {
        centerRoot.style.height = '';
        centerRoot.style.minHeight = '';
        return;
      }
      const nav = document.querySelector('nav');
      const footer = document.querySelector('footer');
      const navStyle = nav ? getComputedStyle(nav) : null;
      const footStyle = footer ? getComputedStyle(footer) : null;
      const navIsFixed = navStyle ? (navStyle.position === 'fixed' || (navStyle.position === 'sticky' && navStyle.top === '0px')) : false;
      const footIsFixed = footStyle ? (footStyle.position === 'fixed' || (footStyle.position === 'sticky' && footStyle.bottom === '0px')) : false;
      const navH = navIsFixed && nav ? nav.offsetHeight : 0;
      const footH = footIsFixed && footer ? footer.offsetHeight : 0;
      const available = Math.max(window.innerHeight - navH - footH, 360);
      centerRoot.style.height = available + 'px';
      centerRoot.style.minHeight = available + 'px';
    }
    applyDesktopCenter();
    window.addEventListener('resize', applyDesktopCenter);
    const roomId = Number(document.getElementById("room_id").value);
    const checkInInput = document.getElementById("fecha_ingreso");
    const checkOutInput = document.getElementById("fecha_salida");
    const priceField = document.getElementById("price");
    const priceTextField = document.getElementById("price_text");
    const engancheField = document.getElementById("enganche");
    const engancheTextField = document.getElementById("enganche_text");
    const durationDisplay = document.getElementById("duration-display");
    const nightsCount = document.getElementById("nights-count");
    const submitButton = document.querySelector('button[type="submit"]');

    // ============================================
    // VALIDACIÓN: Solo reservaciones desde MAÑANA en adelante
    // ============================================
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    
    // Mañana (check-in mínimo)
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowYear = tomorrow.getFullYear();
    const tomorrowMonth = String(tomorrow.getMonth() + 1).padStart(2, '0');
    const tomorrowDay = String(tomorrow.getDate()).padStart(2, '0');
    const tomorrowStr = `${tomorrowYear}-${tomorrowMonth}-${tomorrowDay}`;

    // Pasado mañana (check-out mínimo)
    const dayAfterTomorrow = new Date(today);
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
    const dayAfterYear = dayAfterTomorrow.getFullYear();
    const dayAfterMonth = String(dayAfterTomorrow.getMonth() + 1).padStart(2, '0');
    const dayAfterDay = String(dayAfterTomorrow.getDate()).padStart(2, '0');
    const dayAfterTomorrowStr = `${dayAfterYear}-${dayAfterMonth}-${dayAfterDay}`;

    console.log('📅 Fechas iniciales:', {
      hoy: `${year}-${month}-${day}`,
      mañana: tomorrowStr,
      pasadoMañana: dayAfterTomorrowStr
    });

    // Establecer fecha mínima de ingreso = MAÑANA
    checkInInput.setAttribute('min', tomorrowStr);
    checkInInput.value = tomorrowStr; // Establecer mañana por defecto

    // Establecer fecha mínima de salida = PASADO MAÑANA
    checkOutInput.setAttribute('min', dayAfterTomorrowStr);
    checkOutInput.value = dayAfterTomorrowStr; // Establecer pasado mañana por defecto

    // Validar si el usuario intenta seleccionar HOY
    checkInInput.addEventListener('change', function() {
      const selectedDate = new Date(this.value);
      const todayMidnight = new Date(today.getFullYear(), today.getMonth(), today.getDate());

      if (selectedDate <= todayMidnight) {
        showNotification('⚠️ Las reservaciones solo se pueden hacer desde mañana en adelante', 'error');
        this.value = tomorrowStr;
      }
    });

    // Actualizar fecha mínima de salida cuando cambia entrada
    checkInInput.addEventListener('input', function() {
      const checkInDate = new Date(this.value);
      const nextDay = new Date(checkInDate);
      nextDay.setDate(nextDay.getDate() + 1);
      checkOutInput.min = nextDay.toISOString().split('T')[0];

      if (checkOutInput.value && checkOutInput.value <= this.value) {
        checkOutInput.value = nextDay.toISOString().split('T')[0];
      }
    });

    // Reveal flow: hide overlay and skeleton, show form
    setTimeout(() => {
      // El formulario ya está visible por defecto ahora
      if (skeleton) skeleton.classList.add('hidden');

      // ============================================
      // CALCULAR PRECIO AUTOMÁTICAMENTE al cargar
      // ============================================
      const initialCheckIn = checkInInput.value;
      const initialCheckOut = checkOutInput.value;

      if (initialCheckIn && initialCheckOut) {
        const nights = updateDurationDisplay(initialCheckIn, initialCheckOut);
        // Verificar disponibilidad y ajustar fechas si es necesario
        checkAvailability(initialCheckIn, initialCheckOut).then(async isAvailable => {
          if (isAvailable) {
            fetchPrice(initialCheckIn, nights);
          } else {
            // Habitación no disponible, buscar primera fecha disponible
            showNotification('⚠️ La habitación no está disponible para las fechas por defecto. Buscando fechas disponibles...', 'warning');
            await findNextAvailableDate();
          }
        });
      }
    }, 350);

    // Show notification function
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg text-white font-medium transition-all duration-300 ${
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      notification.setAttribute('role', 'status');
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      }, 4000);
    }

    // Calculate nights between dates
    function calculateNights(checkIn, checkOut) {
      if (!checkIn || !checkOut) return 0;
      const start = new Date(checkIn);
      const end = new Date(checkOut);
      const diffTime = Math.abs(end - start);
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    // Update duration display
    function updateDurationDisplay(checkIn, checkOut) {
      const nights = calculateNights(checkIn, checkOut);
      if (nights > 0) {
        nightsCount.textContent = nights;
        durationDisplay.classList.remove('hidden');
        durationDisplay.classList.add('flex');
      } else {
        durationDisplay.classList.add('hidden');
        durationDisplay.classList.remove('flex');
      }
      return nights;
    }

    // Fetch price from API
    async function fetchPrice(checkIn, nights = 1) {
      if (!checkIn) {
        console.log('⚠️ fetchPrice: checkIn está vacío');
        return;
      }

      const month = new Date(checkIn).getMonth() + 1;
      console.log('💰 Calculando precio para:', { checkIn, nights, month, roomId });
      
      submitButton.disabled = true;
      submitButton.textContent = 'Calculando precio...';

      try {
        const url = `/api/rooms/${roomId}/price?month=${month}`;
        console.log('📡 Llamando a:', url);
        
        const res = await fetch(url);
        const json = await res.json();
        
        console.log('📥 Respuesta del servidor:', json);
        
        const pricePerNight = json.price ?? 0;
        const totalPrice = pricePerNight * nights;

        console.log('💵 Precio calculado:', { pricePerNight, totalPrice });

        priceField.value = totalPrice.toFixed(2);
        priceTextField.value = numberToWords(totalPrice);

        console.log('✅ Campos actualizados:', {
          priceField: priceField.value,
          priceTextField: priceTextField.value
        });

        showNotification(`Precio calculado: $${totalPrice.toFixed(2)} por ${nights} noche(s)`, 'success');
      } catch (err) {
        showNotification('Error al obtener el precio', 'error');
        console.error("❌ Error obteniendo precio:", err);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Crear reservación';
      }
    }

    // Add time to date
    // Check-in: 12:00 PM (mediodía)
    // Check-out: 11:59 AM (para permitir nuevas reservaciones/rentas el mismo día a las 12:00 PM)
    function addTimeToDate(dateStr, isCheckout = false) {
      if (!dateStr) return '';
      
      // Extraer año, mes y día directamente del string YYYY-MM-DD
      // Sin usar new Date() para evitar problemas de zona horaria
      const [year, month, day] = dateStr.split('-');
      
      // Check-out a las 11:59 AM, Check-in a las 12:00 PM
      const time = isCheckout ? '11:59:00' : '12:00:00';
      return `${year}-${month}-${day} ${time}`;
    }

    // Find next available date
    async function findNextAvailableDate() {
      console.log('🔍 Buscando primera fecha disponible...');
      const maxDaysToCheck = 30; // Buscar hasta 30 días en el futuro
      
      // Empezar desde mañana
      let checkDate = new Date(today);
      checkDate.setDate(checkDate.getDate() + 1);
      
      for (let i = 0; i < maxDaysToCheck; i++) {
        // Formatear fecha sin usar toISOString() para evitar problemas de zona horaria
        const year = checkDate.getFullYear();
        const month = String(checkDate.getMonth() + 1).padStart(2, '0');
        const day = String(checkDate.getDate()).padStart(2, '0');
        const checkInStr = `${year}-${month}-${day}`;
        
        // Calcular fecha de salida (día siguiente)
        const checkOutDate = new Date(checkDate);
        checkOutDate.setDate(checkOutDate.getDate() + 1);
        const outYear = checkOutDate.getFullYear();
        const outMonth = String(checkOutDate.getMonth() + 1).padStart(2, '0');
        const outDay = String(checkOutDate.getDate()).padStart(2, '0');
        const checkOutStr = `${outYear}-${outMonth}-${outDay}`;
        
        const checkInWithTime = addTimeToDate(checkInStr);
        const checkOutWithTime = addTimeToDate(checkOutStr, true);
        
        console.log(`📅 Verificando fecha ${i + 1}:`, {
          checkIn: checkInWithTime,
          checkOut: checkOutWithTime
        });
        
        try {
          const url = `/api/rooms/${roomId}/available?check_in=${encodeURIComponent(checkInWithTime)}&check_out=${encodeURIComponent(checkOutWithTime)}`;
          const res = await fetch(url);
          const json = await res.json();
          
          console.log(`  → Disponible: ${json.available}`);
          
          if (json.available) {
            // Encontramos una fecha disponible
            console.log(`✅ Fecha disponible encontrada: ${checkInStr}`);
            checkInInput.value = checkInStr;
            checkOutInput.value = checkOutStr;
            checkOutInput.setAttribute('min', checkOutStr);
            
            const nights = updateDurationDisplay(checkInStr, checkOutStr);
            await fetchPrice(checkInStr, nights);
            showNotification(`✅ Primera fecha disponible: ${checkInStr}`, 'success');
            return;
          }
        } catch (err) {
          console.error("❌ Error verificando fecha:", checkInStr, err);
        }
        
        // Avanzar al siguiente día
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      // No se encontró fecha disponible en los próximos 30 días
      console.log('❌ No se encontró fecha disponible en 30 días');
      showNotification('⚠️ No hay fechas disponibles en los próximos 30 días', 'error');
    }

    // Check room availability
    async function checkAvailability(checkIn, checkOut) {
      if (!checkIn || !checkOut) return false;

      try {
        // Add time to dates (12:00 PM for both check-in and check-out)
        const checkInWithTime = addTimeToDate(checkIn);
        const checkOutWithTime = addTimeToDate(checkOut, true);

        const url = `/api/rooms/${roomId}/available?check_in=${encodeURIComponent(checkInWithTime)}&check_out=${encodeURIComponent(checkOutWithTime)}`;
        const res = await fetch(url);
        const json = await res.json();

        if (!json.available) {
          showNotification("La habitación no está disponible en esas fechas. Ya existe una reservación o renta.", 'error');
          checkInInput.value = "";
          checkOutInput.value = "";
          priceField.value = "";
          priceTextField.value = "";
          durationDisplay.classList.add('hidden');
          durationDisplay.classList.remove('flex');
          return false;
        }

        showNotification("Habitación disponible para las fechas seleccionadas", 'success');
        return true;
      } catch (err) {
        showNotification('Error al verificar disponibilidad', 'error');
        console.error("Error verificando disponibilidad:", err);
        return false;
      }
    }

    // Convert number to words in Spanish
    function numberToWords(num) {
      const unidades = ["", "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve"];
      const especiales = ["diez", "once", "doce", "trece", "catorce", "quince",
                          "dieciséis", "diecisiete", "dieciocho", "diecinueve"];
      const decenas = ["", "", "veinte", "treinta", "cuarenta", "cincuenta",
                       "sesenta", "setenta", "ochenta", "noventa"];
      const centenas = ["", "ciento", "doscientos", "trescientos", "cuatrocientos",
                        "quinientos", "seiscientos", "setecientos", "ochocientos", "novecientos"];

      if (num === 0) return "cero pesos";
      if (num === 100) return "cien pesos";

      let words = "";
      let originalNum = Math.floor(num);

      if (originalNum >= 1000000) {
        return originalNum + " pesos";
      }

      if (originalNum >= 1000) {
        const miles = Math.floor(originalNum / 1000);
        if (miles === 1) {
          words += "mil";
        } else {
          words += numberToWords(miles).replace(" pesos", "") + " mil";
        }
        originalNum = originalNum % 1000;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 100) {
        words += centenas[Math.floor(originalNum / 100)];
        originalNum = originalNum % 100;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 20) {
        words += decenas[Math.floor(originalNum / 10)];
        if (originalNum % 10 > 0) words += " y " + unidades[originalNum % 10];
      } else if (originalNum >= 10) {
        words += especiales[originalNum - 10];
      } else if (originalNum > 0) {
        words += unidades[originalNum];
      }

      return words + " pesos";
    }

    // Validate form before submission
    async function validateForm() {
      const checkIn = checkInInput.value;
      const checkOut = checkOutInput.value;

      if (!checkIn || !checkOut) {
        showNotification('Por favor seleccione las fechas de entrada y salida', 'warning');
        return false;
      }

      if (new Date(checkOut) <= new Date(checkIn)) {
        showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
        return false;
      }

      if (!priceField.value || priceField.value === '0.00') {
        showNotification('El precio no ha sido calculado correctamente', 'error');
        return false;
      }

      // Verificar disponibilidad una última vez antes de enviar
      const isAvailable = await checkAvailability(checkIn, checkOut);
      if (!isAvailable) {
        return false;
      }

      return true;
    }

    // Event listeners
    checkInInput.addEventListener("change", async (e) => {
      const checkIn = e.target.value;
      const checkOut = checkOutInput.value;

      // Update checkout minimum date
      checkOutInput.min = checkIn;

      if (checkOut && new Date(checkOut) <= new Date(checkIn)) {
        checkOutInput.value = "";
        priceField.value = "";
        priceTextField.value = "";
        durationDisplay.classList.add('hidden');
        showNotification('Por favor seleccione una nueva fecha de salida', 'info');
      } else if (checkIn && checkOut) {
        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      } else if (checkIn) {
        // Solo mostrar mensaje, NO calcular precio
        showNotification('Por favor seleccione una fecha de salida', 'info');
      }
    });

    checkOutInput.addEventListener("change", async (e) => {
      const checkIn = checkInInput.value;
      const checkOut = e.target.value;

      if (checkIn && checkOut) {
        if (new Date(checkOut) <= new Date(checkIn)) {
          showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
          e.target.value = "";
          return;
        }

        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      }
    });

    // Convertir enganche a letras automáticamente
    engancheField.addEventListener("input", (e) => {
      const amount = parseFloat(e.target.value) || 0;
      engancheTextField.value = amount > 0 ? numberToWords(amount) : '';
    });

    // Form submission validation
    document.getElementById('formReserve').addEventListener('submit', async (e) => {
      e.preventDefault();

      const isValid = await validateForm();
      if (!isValid) {
        return;
      }

      // Add time to hidden inputs
      const checkInWithTime = addTimeToDate(checkInInput.value);
      const checkOutWithTime = addTimeToDate(checkOutInput.value, true);

      console.log('Enviando fechas con hora:');
      console.log('fecha_ingreso:', checkInWithTime);
      console.log('fecha_salida:', checkOutWithTime);

      // Update the HIDDEN input values with time before submitting
      const hiddenCheckIn = document.getElementById('fecha_ingreso_with_time');
      const hiddenCheckOut = document.getElementById('fecha_salida_with_time');

      if (hiddenCheckIn) hiddenCheckIn.value = checkInWithTime;
      if (hiddenCheckOut) hiddenCheckOut.value = checkOutWithTime;

      // Mostrar overlay con mensaje de creación
      submitButton.disabled = true;
      submitButton.textContent = 'Creando reservación...';
      
      if (overlay) {
        overlay.classList.remove('hidden');
        const loadingMsg = document.getElementById('loadingMessage');
        if (loadingMsg) loadingMsg.textContent = '✨ Creando reservación...';
      }
      
      // Submit the form
      e.target.submit();
    });

    // Phone number formatting
    document.getElementById('telefono').addEventListener('input', (e) => {
      let value = e.target.value.replace(/\D/g, '');
      if (value.length > 10) value = value.slice(0, 10);
      e.target.value = value;
    });

    console.log('Sistema de renta inicializado correctamente');
  });
</script>
