{{> navbar user=user}}

<div class="min-h-screen bg-gray-50 pt-24 pb-12">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    
    <!-- Header -->
    <div class="mb-6">
      <h1 class="text-3xl font-bold text-gray-900 flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-8 h-8 text-blue-600" viewBox="0 0 24 24">
          <path d="M12.75 12.75a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM7.5 15.75a.75.75 0 100-1.5.75.75 0 000 1.5zM8.25 17.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM9.75 15.75a.75.75 0 100-1.5.75.75 0 000 1.5zM10.5 17.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM12 15.75a.75.75 0 100-1.5.75.75 0 000 1.5zM12.75 17.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM14.25 15.75a.75.75 0 100-1.5.75.75 0 000 1.5zM15 17.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM16.5 15.75a.75.75 0 100-1.5.75.75 0 000 1.5zM15 12.75a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM16.5 13.5a.75.75 0 100-1.5.75.75 0 000 1.5z"/>
          <path fill-rule="evenodd" d="M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z" clip-rule="evenodd"/>
        </svg>
        Calendario de Habitaciones
      </h1>
      <p class="mt-2 text-sm text-gray-600">Vista de ocupación y estados de todas las habitaciones</p>
    </div>

    <!-- Leyenda de estados -->
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
      <h3 class="text-sm font-semibold text-gray-700 mb-3">Estados de Habitaciones</h3>
      <div class="flex flex-wrap gap-4">
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 rounded bg-red-500"></div>
          <span class="text-sm text-gray-700">Ocupado (Renta)</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 rounded bg-blue-500"></div>
          <span class="text-sm text-gray-700">Reservado</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 rounded bg-yellow-500"></div>
          <span class="text-sm text-gray-700">⚠️ Día de Transición (Cambio de cliente)</span>
        </div>
      </div>
    </div>

    <!-- Controles de navegación -->
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
      <div class="flex items-center justify-between">
        <button id="prevMonth" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
          </svg>
          Anterior
        </button>
        
        <h2 id="currentMonth" class="text-xl font-bold text-gray-900"></h2>
        
        <button id="nextMonth" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center gap-2">
          Siguiente
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Calendario -->
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <div id="calendar-container" class="p-6">
        <!-- El calendario se generará aquí dinámicamente -->
      </div>
    </div>

  </div>
</div>

<script>
  let currentDate = new Date();
  let roomsData = [];

  // Cargar datos de habitaciones
  async function loadRoomsData() {
    try {
      const response = await fetch('/api/rooms/calendar-data');
      const data = await response.json();
      roomsData = data.rooms || [];
      console.log('📊 Datos del calendario cargados:', roomsData);
      renderCalendar();
    } catch (error) {
      console.error('Error cargando datos:', error);
    }
  }

  // Renderizar calendario
  function renderCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // Actualizar título
    const monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;

    // Obtener primer y último día del mes
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startDayOfWeek = firstDay.getDay();

    // Crear estructura del calendario
    let calendarHTML = `
      <div class="overflow-x-auto">
        <table class="w-full border-collapse">
          <thead>
            <tr class="bg-gray-100">
              <th class="border border-gray-300 p-3 text-left font-semibold text-gray-700 sticky left-0 bg-gray-100 z-10">Habitación</th>
    `;

    // Encabezados de días
    const dayNames = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      const dayName = dayNames[date.getDay()];
      const isWeekend = date.getDay() === 0 || date.getDay() === 6;
      calendarHTML += `
        <th class="border border-gray-300 p-2 text-center text-xs ${isWeekend ? 'bg-blue-50' : ''}">
          <div class="font-semibold">${dayName}</div>
          <div class="text-gray-600">${day}</div>
        </th>
      `;
    }
    calendarHTML += '</tr></thead><tbody>';

    // Filtrar solo habitaciones con rentas o reservaciones
    const roomsWithBookings = roomsData.filter(room => {
      return (room.rentas && room.rentas.length > 0) || 
             (room.reservaciones && room.reservaciones.length > 0);
    });

    // Mensaje si no hay habitaciones ocupadas
    if (roomsWithBookings.length === 0) {
      calendarHTML += `
        <tr>
          <td colspan="${daysInMonth + 1}" class="text-center py-8 text-gray-500">
            <div class="flex flex-col items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5" />
              </svg>
              <p class="font-semibold">No hay habitaciones ocupadas este mes</p>
              <p class="text-sm">Todas las habitaciones están disponibles</p>
            </div>
          </td>
        </tr>
      `;
    }

    // Filas de habitaciones con rentas o reservaciones
    roomsWithBookings.forEach(room => {
      calendarHTML += `
        <tr class="hover:bg-gray-50">
          <td class="border border-gray-300 p-3 font-semibold text-gray-700 sticky left-0 bg-white z-10">
            <div class="flex items-center gap-2">
              <span class="text-sm">${room.numero}</span>
              <span class="text-xs text-gray-500">${room.tipo}</span>
            </div>
          </td>
      `;

      // Celdas de días
      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const status = getRoomStatus(room, dateStr);
        const bgColor = getStatusColor(status.type);
        const tooltip = status.info ? `title="${status.info}"` : '';
        
        calendarHTML += `
          <td class="border border-gray-300 p-1 text-center cursor-pointer hover:opacity-80 transition ${bgColor}" ${tooltip}>
            ${status.icon || ''}
          </td>
        `;
      }
      calendarHTML += '</tr>';
    });

    calendarHTML += '</tbody></table></div>';
    document.getElementById('calendar-container').innerHTML = calendarHTML;
  }

  // Obtener estado de habitación para una fecha
  function getRoomStatus(room, dateStr) {
    // Crear fecha a medianoche para comparación correcta
    const date = new Date(dateStr + 'T00:00:00');
    
    // Verificar si está en limpieza
    if (room.estado === 'limpieza') {
      return { type: 'limpieza', icon: '🧹', info: 'En limpieza' };
    }

    // Variables para detectar intersecciones
    let rentaActiva = null;
    let reservaActiva = null;

    // Verificar rentas
    if (room.rentas && room.rentas.length > 0) {
      for (const renta of room.rentas) {
        const checkInStr = renta.fecha_ingreso.split('T')[0];
        const checkOutStr = renta.fecha_salida.split('T')[0];
        const checkIn = new Date(checkInStr + 'T00:00:00');
        const checkOut = new Date(checkOutStr + 'T00:00:00');
        
        if (date >= checkIn && date <= checkOut) {
          rentaActiva = renta;
          break;
        }
      }
    }

    // Verificar reservaciones
    if (room.reservaciones && room.reservaciones.length > 0) {
      for (const reserva of room.reservaciones) {
        const checkInStr = reserva.fecha_ingreso.split('T')[0];
        const checkOutStr = reserva.fecha_salida.split('T')[0];
        const checkIn = new Date(checkInStr + 'T00:00:00');
        const checkOut = new Date(checkOutStr + 'T00:00:00');
        
        if (date >= checkIn && date <= checkOut) {
          reservaActiva = reserva;
          break;
        }
      }
    }

    // Función auxiliar para formatear fechas
    const formatDate = (dateStr) => {
      const d = new Date(dateStr + 'T00:00:00');
      return d.toLocaleDateString('es-MX', { day: '2-digit', month: 'short', year: 'numeric' });
    };

    // Si hay INTERSECCIÓN (renta Y reservación el mismo día)
    if (rentaActiva && reservaActiva) {
      const checkOutRenta = rentaActiva.fecha_salida.split('T')[0];
      const checkInReserva = reservaActiva.fecha_ingreso.split('T')[0];
      
      const tooltip = `⚠️ DÍA DE TRANSICIÓN
━━━━━━━━━━━━━━━━━━━━━━━━
🔴 SALIDA DE RENTA:
👤 ${rentaActiva.nombre_cliente}
📅 Check-out: ${formatDate(checkOutRenta)}

📅 ENTRADA DE RESERVACIÓN:
👤 ${reservaActiva.nombre_cliente}
📅 Check-in: ${formatDate(checkInReserva)}

⚠️ Coordinar limpieza entre clientes`;
      
      return {
        type: 'transicion',
        icon: '⚠️',
        info: tooltip
      };
    }

    // Si solo hay RENTA
    if (rentaActiva) {
      const checkInStr = rentaActiva.fecha_ingreso.split('T')[0];
      const checkOutStr = rentaActiva.fecha_salida.split('T')[0];
      
      const tooltip = `🏠 HABITACIÓN OCUPADA (RENTA)
━━━━━━━━━━━━━━━━━━━━━━━━
👤 Cliente: ${rentaActiva.nombre_cliente}
📅 Check-in: ${formatDate(checkInStr)}
📅 Check-out: ${formatDate(checkOutStr)}
💳 Tipo de pago: ${rentaActiva.tipo_pago || 'No especificado'}
💵 Monto: $${Number(rentaActiva.monto).toLocaleString('es-MX')} MXN`;
      
      return { 
        type: 'ocupado', 
        icon: '🔴',
        info: tooltip
      };
    }

    // Si solo hay RESERVACIÓN
    if (reservaActiva) {
      const checkInStr = reservaActiva.fecha_ingreso.split('T')[0];
      const checkOutStr = reservaActiva.fecha_salida.split('T')[0];
      const enganche = reservaActiva.enganche ? `💰 Enganche pagado: $${Number(reservaActiva.enganche).toLocaleString('es-MX')} MXN` : '💰 Sin enganche';
      
      const tooltip = `📅 HABITACIÓN RESERVADA
━━━━━━━━━━━━━━━━━━━━━━━━
👤 Cliente: ${reservaActiva.nombre_cliente}
📧 Email: ${reservaActiva.correo_cliente || 'No especificado'}
📱 Teléfono: ${reservaActiva.telefono_cliente || 'No especificado'}
📅 Fecha ingreso: ${formatDate(checkInStr)}
📅 Fecha salida: ${formatDate(checkOutStr)}
💵 Precio total: $${Number(reservaActiva.monto).toLocaleString('es-MX')} MXN
${enganche}`;
      
      return { 
        type: 'reservado', 
        icon: '📅',
        info: tooltip
      };
    }

    return { type: 'disponible', icon: '', info: 'Disponible' };
  }

  // Obtener color según estado
  function getStatusColor(type) {
    const colors = {
      'disponible': 'bg-gray-100',
      'ocupado': 'bg-red-500 text-white',
      'reservado': 'bg-blue-500 text-white',
      'limpieza': 'bg-orange-500 text-white',
      'transicion': 'bg-yellow-500 text-black font-bold'
    };
    return colors[type] || 'bg-gray-100';
  }

  // Navegación
  document.getElementById('prevMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    loadRoomsData();
  });

  document.getElementById('nextMonth').addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    loadRoomsData();
  });

  // Cargar datos al inicio
  loadRoomsData();
</script>

{{> footer}}
