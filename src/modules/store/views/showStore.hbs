<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100 pb-20">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b border-slate-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <h1 class="text-3xl md:text-4xl font-bold text-blue-900 text-center mb-6">
        🛒 Tienda del Hotel
      </h1>
      <div class="flex flex-wrap gap-3 justify-center">
        {{#if (eq user.role "Administrador")}}
          <a href="/store/create" class="inline-flex items-center gap-2 px-4 py-2.5 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg shadow-md transition-all">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5h-6.75v6.75a.75.75 0 01-1.5 0v-6.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z" clip-rule="evenodd"/></svg>
            Agregar Producto
          </a>
        {{/if}}
        <a href="/sales" class="inline-flex items-center gap-2 px-4 py-2.5 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg shadow-md transition-all">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M7.502 6h7.128A3.375 3.375 0 0118 9.375v9.375a3 3 0 003-3V6.108c0-1.505-1.125-2.811-2.664-2.94a48.972 48.972 0 00-.673-.05A3 3 0 0015 1.5h-1.5a3 3 0 00-2.663 1.618c-.225.015-.45.032-.673.05C8.662 3.295 7.554 4.542 7.502 6zM13.5 3A1.5 1.5 0 0012 4.5h4.5A1.5 1.5 0 0015 3h-1.5z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M3 9.375C3 8.339 3.84 7.5 4.875 7.5h9.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625V9.375zm9.586 4.594a.75.75 0 00-1.172-.938l-2.476 3.096-.908-.907a.75.75 0 00-1.06 1.06l1.5 1.5a.75.75 0 001.116-.062l3-3.75z" clip-rule="evenodd"/></svg>
          Ver Ventas
        </a>
      </div>
    </div>
  </div>

  <!-- Contenido -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Filtros -->
    <div class="bg-white rounded-xl shadow-md p-4 mb-6">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-1">
          <input type="text" id="searchProduct" placeholder="Buscar productos..." class="w-full pl-4 pr-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"/>
        </div>
        <div class="md:w-64">
          <select id="filterCategory" class="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none">
            <option value="">Todas las categorías</option>
            <option value="bebidas">Bebidas</option>
            <option value="snacks">Snacks</option>
            <option value="comida">Comida</option>
            <option value="otros">Otros</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Grid de Productos -->
    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {{#if products}}
        {{#each products}}
          <div class="product-card bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all flex flex-col" 
               data-id="{{this.id}}" 
               data-nombre="{{this.nombre}}" 
               data-precio="{{this.precio}}" 
               data-categoria="{{this.categoria}}" 
               data-stock="{{this.stock}}">
            <div class="p-4 flex-grow flex flex-col justify-between">
              <div>
                <h3 class="text-lg font-bold text-slate-800 mb-1">{{this.nombre}}</h3>
                <p class="text-sm text-slate-500 mb-2">{{this.categoria}}</p>
                <div class="flex items-center justify-between mb-3">
                  <span class="text-2xl font-bold text-blue-600">${{this.precio}}</span>
                  <span class="text-sm text-slate-600">Stock: {{this.stock}}</span>
                </div>
              </div>
              <button class="sell-btn mt-2 w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed" {{#unless (gt this.stock 0)}}disabled{{/unless}}>
                {{#if (gt this.stock 0)}}Vender{{else}}Agotado{{/if}}
              </button>
            </div>
          </div>
        {{/each}}
      {{else}}
        <div class="col-span-full text-center py-12">
          <p class="text-xl font-semibold text-slate-600">No hay productos disponibles</p>
        </div>
      {{/if}}
    </div>
  </div>

  <!-- Modal de Venta Rápida -->
  <div id="sale-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-2xl p-8 w-full max-w-md">
      <h2 class="text-2xl font-bold text-gray-800 mb-4">Registrar Venta</h2>
      <form id="sale-form">
        <input type="hidden" id="modal-product-id">
        <div class="mb-4">
          <p class="text-lg font-semibold" id="modal-product-name"></p>
          <p class="text-gray-600" id="modal-product-price"></p>
        </div>
        
        <div class="mb-4">
          <label for="modal-quantity" class="block text-sm font-medium text-gray-700 mb-2">Cantidad</label>
          <input type="number" id="modal-quantity" value="1" min="1" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
        </div>

        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Método de Pago</label>
          <div class="grid grid-cols-3 gap-2">
            <label class="flex items-center justify-center p-3 border-2 rounded-lg cursor-pointer"><input type="radio" name="tipo_pago" value="efectivo" class="sr-only peer" checked><span class="font-semibold peer-checked:text-purple-600">Efectivo</span></label>
            <label class="flex items-center justify-center p-3 border-2 rounded-lg cursor-pointer"><input type="radio" name="tipo_pago" value="tarjeta" class="sr-only peer"><span class="font-semibold peer-checked:text-purple-600">Tarjeta</span></label>
            <label class="flex items-center justify-center p-3 border-2 rounded-lg cursor-pointer"><input type="radio" name="tipo_pago" value="transferencia" class="sr-only peer"><span class="font-semibold peer-checked:text-purple-600">Transf.</span></label>
          </div>
        </div>

        <div class="flex gap-4">
          <button type="button" id="cancel-sale-btn" class="w-1/2 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold rounded-lg">Cancelar</button>
          <button type="submit" class="w-1/2 py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg">Confirmar Venta</button>
        </div>
      </form>
    </div>
  </div>
  
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const products = JSON.parse('{{{json products}}}');
    const modal = document.getElementById('sale-modal');
    const form = document.getElementById('sale-form');
    const cancelBtn = document.getElementById('cancel-sale-btn');

    const openModal = (product) => {
      document.getElementById('modal-product-id').value = product.id;
      document.getElementById('modal-product-name').textContent = product.nombre;
      document.getElementById('modal-product-price').textContent = `$${product.precio.toFixed(2)}`;
      document.getElementById('modal-quantity').max = product.stock;
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    };

    const closeModal = () => {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      form.reset();
    };

    document.querySelectorAll('.sell-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const card = e.target.closest('.product-card');
        const productId = card.dataset.id;
        const product = products.find(p => p.id == productId);
        if (product) {
          openModal(product);
        }
      });
    });

    cancelBtn.addEventListener('click', closeModal);

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const productId = document.getElementById('modal-product-id').value;
      const quantity = parseInt(document.getElementById('modal-quantity').value, 10);
      const paymentMethod = form.querySelector('input[name="tipo_pago"]:checked').value;
      const product = products.find(p => p.id == productId);

      if (quantity > product.stock) {
        alert('La cantidad excede el stock disponible.');
        return;
      }

      const saleData = {
        productos: JSON.stringify([{
          id: product.id,
          nombre: product.nombre,
          precio: product.precio,
          cantidad: quantity,
          subtotal: product.precio * quantity
        }]),
        total: product.precio * quantity,
        tipo_pago: paymentMethod,
        nombre_cliente: 'Cliente de Mostrador',
        total_letras: numeroALetras(product.precio * quantity)
      };

      try {
        const response = await fetch('/store/checkout', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(saleData)
        });
        const result = await response.json();
        if (result.success) {
          alert('✅ Venta registrada exitosamente');
          closeModal();
          window.location.reload(); // Recargar para ver el stock actualizado
        } else {
          alert('❌ Error: ' + (result.error || 'No se pudo registrar la venta'));
        }
      } catch (error) {
        alert('❌ Error de conexión al registrar la venta.');
      }
    });

    // Lógica de filtros
    const searchInput = document.getElementById('searchProduct');
    const categoryFilter = document.getElementById('filterCategory');
    const applyFilters = () => {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedCategory = categoryFilter.value;
      document.querySelectorAll('.product-card').forEach(card => {
        const productName = card.dataset.nombre.toLowerCase();
        const productCategory = card.dataset.categoria;
        const matchesSearch = productName.includes(searchTerm);
        const matchesCategory = !selectedCategory || productCategory === selectedCategory;
        card.style.display = (matchesSearch && matchesCategory) ? 'flex' : 'none';
      });
    };
    searchInput.addEventListener('input', applyFilters);
    categoryFilter.addEventListener('change', applyFilters);
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/numero-a-letras@1.0.6/dist/numero-a-letras.min.js"></script>