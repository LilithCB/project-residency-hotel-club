-- Nombre de la base de datos
CREATE DATABASE IF NOT EXISTS hotel_club;

-- Si la base de datos ya existe, no se creará de nuevo
-- Esto es útil para evitar errores al intentar crear una base de datos que ya existe

-- Usar la base de datos
USE hotel_club;

-- Tabla de usuarios del hotel para la admistracion de hotel y club.
CREATE TABLE
  users_hotel (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE, -- Nombre de usuario único
    password VARCHAR(255) NOT NULL, -- Contraseña cifrada
    role ENUM ('Administrador', 'Usuario') NOT NULL -- Rol del usuario
  );


-- Tabla para almacenar tokens de recuperación de contraseña
CREATE TABLE
  password_resets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- ID del usuario que solicita la recuperación
    token VARCHAR(255) NOT NULL UNIQUE, -- Token único para la recuperación
    expires_at DATETIME NOT NULL, -- Fecha y hora de expiración del token
    FOREIGN KEY (user_id) REFERENCES users_hotel (id) ON DELETE CASCADE
  );

-- Las siguientes tablas aun no estan creadas, solo  son de suposciones...
-- si asi se van manejar en la administracion sistema en los requistios...
--- Si no hay que modificar las tablas....

-- Tabla de clientes (usuarios que son clientes)
CREATE TABLE
  user_cliente (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- ID del usuario que es cliente
    first_name VARCHAR(50) NOT NULL, -- Nombre del cliente
    last_name VARCHAR(50) NOT NULL, -- Apellido del cliente
    email VARCHAR(100) NOT NULL UNIQUE, -- Correo electrónico único
    phone VARCHAR(15), -- Teléfono del cliente
    FOREIGN KEY (user_id) REFERENCES users_hotel (id) ON DELETE CASCADE
  );

-- Tabla de habitaciones
CREATE TABLE
  rooms (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_number VARCHAR(10) NOT NULL UNIQUE, -- Número de habitación único
    type ENUM ('Individual', 'Doble', 'Suite') NOT NULL, -- Tipo de habitación
    price DECIMAL(10, 2) NOT NULL, -- Precio por noche
    status ENUM ('Disponible', 'Ocupada', 'Reservada') NOT NULL DEFAULT 'Disponible' -- Estado de la habitación
  );

-- Tabla de reservas
CREATE TABLE
  reservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_cliente_id INT NOT NULL, -- ID del cliente que realiza la reserva
    room_id INT NOT NULL, -- ID de la habitación reservada
    start_date DATE NOT NULL, -- Fecha de inicio de la reserva
    end_date DATE NOT NULL, -- Fecha de fin de la reserva
    status ENUM ('Pendiente', 'Confirmada', 'Cancelada') NOT NULL DEFAULT 'Pendiente', -- Estado de la reserva
    FOREIGN KEY (user_cliente_id) REFERENCES user_cliente (id) ON DELETE CASCADE,
    FOREIGN KEY (room_id) REFERENCES rooms (id) ON DELETE CASCADE
  );



--MODULE-DANI


-- Tabla de tipos de membresía (elimina ENUM)
CREATE TABLE tipos_membresia (
    id_tipo_membresia SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    max_integrantes INTEGER DEFAULT 1 CHECK (max_integrantes >= 1)
);

-- Tabla de clientes (sin cambios, ya está en 3NF)
CREATE TABLE clientes (
    id_cliente SERIAL PRIMARY KEY,
    nombre_completo VARCHAR(150) NOT NULL,
    telefono VARCHAR(20),
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de relaciones familiares (nueva)
CREATE TABLE relaciones_familiares (
    id_relacion SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
);

-- Tabla de membresías (precios base históricos)
CREATE TABLE membresias (
    id_membresia SERIAL PRIMARY KEY,
    id_tipo_membresia INTEGER NOT NULL REFERENCES tipos_membresia(id_tipo_membresia),
    precio_base DECIMAL(10,2) NOT NULL CHECK (precio_base > 0),
    vigencia_dias INTEGER NOT NULL CHECK (vigencia_dias > 0),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT TRUE
);

-- Tabla de membresías activas
CREATE TABLE membresias_activas (
    id_activa SERIAL PRIMARY KEY,
    id_cliente INTEGER NOT NULL REFERENCES clientes(id_cliente),
    id_membresia INTEGER NOT NULL REFERENCES membresias(id_membresia),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    precio_final DECIMAL(10,2) NOT NULL CHECK (precio_final > 0),
    qr_code VARCHAR(255) UNIQUE,
    estado VARCHAR(20) DEFAULT 'Activa' CHECK (estado IN ('Activa', 'Vencida', 'Cancelada')),
    CHECK (fecha_fin > fecha_inicio)
);

-- Tabla de integrantes (reemplaza familiares)
CREATE TABLE integrantes_membresia (
    id_integrante SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    id_cliente INTEGER NOT NULL REFERENCES clientes(id_cliente),
    id_relacion INTEGER REFERENCES relaciones_familiares(id_relacion),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(id_activa, id_cliente)
);

-- Tabla de métodos de pago (elimina ENUM)
CREATE TABLE metodos_pago (
    id_metodo_pago SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
);

-- Tabla de pagos
CREATE TABLE pagos (
    id_pago SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    id_metodo_pago INTEGER NOT NULL REFERENCES metodos_pago(id_metodo_pago),
    monto DECIMAL(10,2) NOT NULL CHECK (monto > 0),
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comprobante_url VARCHAR(255),
    referencia_pago VARCHAR(100)
);

-- Tabla de estados de membresía (para auditoría)
CREATE TABLE historial_estados_membresia (
    id_historial SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas(id_activa),
    estado_anterior VARCHAR(20),
    estado_nuevo VARCHAR(20) NOT NULL,
    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    motivo_cambio TEXT
);