-- Nombre de la base de datos
CREATE DATABASE IF NOT EXISTS hotel_club;

-- Si la base de datos ya existe, no se creará de nuevo
USE hotel_club;

-- Usar la base de datos
-- MODULE LOGIN
CREATE TABLE IF NOT EXISTS -- Tabla de usuarios del hotel para la admistracion de hotel y club.
users_hotel (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE, -- Nombre de usuario único
  password VARCHAR(255) NOT NULL, -- Contraseña cifrada
  role ENUM ('Administrador', 'Usuario') NOT NULL -- Rol del usuario
);

CREATE TABLE IF NOT EXISTS   -- Tabla para almacenar tokens de recuperación de contraseña
password_resets (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL, -- ID del usuario que solicita la recuperación
  token VARCHAR(255) NOT NULL UNIQUE, -- Token único para la recuperación
  expires_at DATETIME NOT NULL, -- Fecha y hora de expiración del token
  FOREIGN KEY (user_id) REFERENCES users_hotel (id) ON DELETE CASCADE
);

-- =====================================================
-- MÓDULO DE HABITACIONES
-- =====================================================
-- 1) Tabla de Habitaciones
CREATE TABLE IF NOT EXISTS habitaciones (
  id INT AUTO_INCREMENT PRIMARY KEY,
  numero VARCHAR(10) NOT NULL UNIQUE,
  tipo ENUM('sencilla', 'suite') NOT NULL,
  estado ENUM('disponible', 'ocupado', 'limpieza') DEFAULT 'disponible'
);

-- Insertar habitaciones fijas
INSERT INTO
  habitaciones (numero, tipo)
VALUES
  ('101', 'sencilla'),
  ('102', 'sencilla'),
  ('103', 'sencilla'),
  ('104', 'sencilla'),
  ('106', 'sencilla'),
  ('107', 'sencilla'),
  ('108', 'sencilla'),
  ('109', 'sencilla'),
  ('105', 'suite'),
  ('110', 'suite');

-- 2) Tabla de Precios
-- Precio definido por mes y tipo de habitación
CREATE TABLE  IF NOT EXISTS precios (
  id INT AUTO_INCREMENT PRIMARY KEY,
  tipo_habitacion ENUM ('sencilla', 'suite') NOT NULL,
  mes INT NOT NULL CHECK (mes BETWEEN 1 AND 12),
  monto DECIMAL(10, 2) NOT NULL,
  fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (tipo_habitacion, mes)
);

INSERT INTO
  precios (tipo_habitacion, mes, monto)
VALUES
  ('sencilla', 1, 100.00),
  ('sencilla', 2, 100.00),
  ('sencilla', 3, 120.00),
  ('sencilla', 4, 120.00),
  ('sencilla', 5, 150.00),
  ('sencilla', 6, 150.00),
  ('sencilla', 7, 200.00),
  ('sencilla', 8, 200.00),
  ('sencilla', 9, 150.00),
  ('sencilla', 10, 150.00),
  ('sencilla', 11, 120.00),
  ('sencilla', 12, 120.00),
  ('suite', 1, 200.00),
  ('suite', 2, 200.00),
  ('suite', 3, 250.00),
  ('suite', 4, 250.00),
  ('suite', 5, 300.00),
  ('suite', 6, 300.00),
  ('suite', 7, 400.00),
  ('suite', 8, 400.00),
  ('suite', 9, 300.00),
  ('suite', 10, 300.00),
  ('suite', 11, 250.00),
  ('suite', 12, 250.00);


CREATE TABLE IF NOT EXISTS medios_mensajes (
  id_medio_mensaje INT AUTO_INCREMENT PRIMARY KEY,
  correo_cliente VARCHAR(100) NOT NULL,
  telefono_cliente VARCHAR(20) NOT NULL
);

INSERT INTO medios_mensajes (correo_cliente, telefono_cliente)
VALUES ('correo@ejemplo.com', '4451234567');

INSERT INTO medios_mensajes (correo_cliente, telefono_cliente)
VALUES ('cliente_renta@ejemplo.com', '4469876543');

SET @ultimo_medio = LAST_INSERT_ID();



-- 3) Tabla de Reservaciones
-- Se guarda el precio al momento de la reserva
CREATE TABLE IF NOT EXISTS reservaciones (
  id INT AUTO_INCREMENT PRIMARY KEY,
  habitacion_id INT NOT NULL,
  usuario_id INT NOT NULL,
  id_medio_mensaje INT NOT NULL,
  nombre_cliente VARCHAR(100) NOT NULL,
  fecha_reserva DATE NOT NULL,
  fecha_ingreso DATE NOT NULL,
  fecha_salida DATE NOT NULL,
  monto DECIMAL(10, 2) NOT NULL,
  monto_letras VARCHAR(255) NOT NULL,
  fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (habitacion_id) REFERENCES habitaciones (id),
  FOREIGN KEY (usuario_id) REFERENCES users_hotel (id),
  FOREIGN KEY (id_medio_mensaje) REFERENCES medios_mensajes (id_medio_mensaje)
);

INSERT INTO reservaciones (
  habitacion_id, usuario_id, id_medio_mensaje,
  nombre_cliente, fecha_reserva, fecha_ingreso, fecha_salida,
  monto, monto_letras
) VALUES (
  1, 1, LAST_INSERT_ID(),
  'Juan Perez', CURDATE(), '2024-06-10', '2024-06-15',
  600.00, 'Seiscientos pesos'
);


-- 4) Tabla de Rentas
-- Registro de ocupación real de habitaciones
CREATE TABLE IF NOT EXISTS rentas (
  id INT AUTO_INCREMENT PRIMARY KEY,
  habitacion_id INT NOT NULL,
  usuario_id INT NOT NULL,
  id_medio_mensaje INT NOT NULL,
  nombre_cliente VARCHAR(100) NOT NULL,
  fecha_ingreso DATE NOT NULL,
  fecha_salida DATE NOT NULL,
  tipo_pago ENUM ('tarjeta', 'transferencia', 'efectivo') NOT NULL,
  monto DECIMAL(10, 2) NOT NULL,
  monto_letras VARCHAR(255) NOT NULL,
  fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (habitacion_id) REFERENCES habitaciones (id),
  FOREIGN KEY (usuario_id) REFERENCES users_hotel (id),
  FOREIGN KEY (id_medio_mensaje) REFERENCES medios_mensajes (id_medio_mensaje)
);

INSERT INTO rentas (
  habitacion_id, usuario_id, id_medio_mensaje,
  nombre_cliente, fecha_ingreso, fecha_salida,
  tipo_pago, monto, monto_letras
) VALUES (
  1, 1, LAST_INSERT_ID(),
  'Juan Perez', '2024-06-10', '2024-06-15',
  'efectivo', 600.00, 'Seiscientos pesos'
);

-- =====================================================
-- EJEMPLO DE CONSULTA PARA EL CALENDARIO
-- Mostrar habitaciones ocupadas en los próximos días
-- =====================================================
SELECT
  h.numero,
  h.tipo,
  r.fecha_ingreso,
  r.fecha_salida,
  r.nombre_cliente
FROM
  reservaciones r
  INNER JOIN habitaciones h ON r.habitacion_id = h.id
WHERE
  r.fecha_salida >= CURDATE ()
ORDER BY
  r.fecha_ingreso;

  -- generacion de reportes...

-- Reporte de ingresos por rentas diarias
SELECT
    fecha_ingreso AS dia,
    COUNT(id) AS total_rentas,
    SUM(monto) AS total_ingresos
FROM rentas
GROUP BY fecha_ingreso
ORDER BY fecha_ingreso;


-- Reporte de ingresos por rentas en la última semana
SELECT
    COUNT(id) AS total_rentas,
    SUM(monto) AS total_ingresos
FROM rentas
WHERE fecha_ingreso BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE();

-- Reporte de ingresos por rentas en los últimos 15 días
SELECT
    COUNT(id) AS total_rentas,
    SUM(monto) AS total_ingresos
FROM rentas
WHERE fecha_ingreso BETWEEN CURDATE() - INTERVAL 15 DAY AND CURDATE();

-- Reporte de ingresos por rentas en el mes actual
SELECT
    COUNT(id) AS total_rentas,
    SUM(monto) AS total_ingresos
FROM rentas
WHERE MONTH(fecha_ingreso) = MONTH(CURDATE())
  AND YEAR(fecha_ingreso) = YEAR(CURDATE());





-- =====================================================
-- MÓDULO DE MEMBRESÍAS
-- =====================================================
CREATE TABLE -- Tabla de tipos de membresía (elimina ENUM)
  tipos_membresia (
    id_tipo_membresia SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    max_integrantes INTEGER DEFAULT 1 CHECK (max_integrantes >= 1)
  );

CREATE TABLE -- Tabla de clientes (sin cambios, ya está en 3NF)
  clientes (
    id_cliente SERIAL PRIMARY KEY,
    nombre_completo VARCHAR(150) NOT NULL,
    telefono VARCHAR(20),
    correo VARCHAR(100),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );

CREATE TABLE -- Tabla de relaciones familiares (nueva)
  relaciones_familiares (
    id_relacion SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
  );

CREATE TABLE -- Tabla de membresías (precios base históricos)
  membresias (
    id_membresia SERIAL PRIMARY KEY,
    id_tipo_membresia INTEGER NOT NULL REFERENCES tipos_membresia (id_tipo_membresia),
    precio_base DECIMAL(10, 2) NOT NULL CHECK (precio_base > 0),
    vigencia_dias INTEGER NOT NULL CHECK (vigencia_dias > 0),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT TRUE
  );

CREATE TABLE -- Tabla de membresías activas
  membresias_activas (
    id_activa SERIAL PRIMARY KEY,
    id_cliente INTEGER NOT NULL REFERENCES clientes (id_cliente),
    id_membresia INTEGER NOT NULL REFERENCES membresias (id_membresia),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    precio_final DECIMAL(10, 2) NOT NULL CHECK (precio_final > 0),
    qr_code VARCHAR(255) UNIQUE,
    estado VARCHAR(20) DEFAULT 'Activa' CHECK (estado IN ('Activa', 'Vencida', 'Cancelada')),
    CHECK (fecha_fin > fecha_inicio)
  );

CREATE TABLE -- Tabla de integrantes (reemplaza familiares)
  integrantes_membresia (
    id_integrante SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas (id_activa),
    id_cliente INTEGER NOT NULL REFERENCES clientes (id_cliente),
    id_relacion INTEGER REFERENCES relaciones_familiares (id_relacion),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (id_activa, id_cliente)
  );

CREATE TABLE -- Tabla de métodos de pago (elimina ENUM)
  metodos_pago (
    id_metodo_pago SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT
  );

CREATE TABLE -- Tabla de pagos
  pagos (
    id_pago SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas (id_activa),
    id_metodo_pago INTEGER NOT NULL REFERENCES metodos_pago (id_metodo_pago),
    monto DECIMAL(10, 2) NOT NULL CHECK (monto > 0),
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    comprobante_url VARCHAR(255),
    referencia_pago VARCHAR(100)
  );

CREATE TABLE -- Tabla de estados de membresía (para auditoría)
  historial_estados_membresia (
    id_historial SERIAL PRIMARY KEY,
    id_activa INTEGER NOT NULL REFERENCES membresias_activas (id_activa),
    estado_anterior VARCHAR(20),
    estado_nuevo VARCHAR(20) NOT NULL,
    fecha_cambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    motivo_cambio TEXT
  );
